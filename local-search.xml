<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>3-创建环境示例</title>
    <link href="/2024/07/14/AI-env/3-%E5%88%9B%E5%BB%BA%E7%8E%AF%E5%A2%83%E7%A4%BA%E4%BE%8B/"/>
    <url>/2024/07/14/AI-env/3-%E5%88%9B%E5%BB%BA%E7%8E%AF%E5%A2%83%E7%A4%BA%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本篇文章将在WIN上的Docker容器中创建一个CLIP项目（多模态检索模型）的环境。容器用的是<code>pytorch/pytorch:2.0.1-cuda11.7-cudnn8-devel</code>镜像所创建的容器。</p><p>先看一下CLIP项目所需的pytorch版本是否和我们<code>base</code>中的一致：<a href="https://github.com/openai/CLIP">CLIP项目</a>中要求Pytorch大于等于11.7即可。因此我们可以直接克隆<code>base</code>环境：<code>conda create -n CLIP --clone base</code>，克隆完毕之后激活<code>conda activate CLIP</code>，用<code>conda list</code>可以查看到我们的pytorch的版本是和base中一致的。</p><p>接下来按照项目中的说明安装一些其他的包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install ftfy regex tqdm<br>pip install git+https://github.com/openai/CLIP.git<br></code></pre></td></tr></table></figure><p><code>pip install git+ https://github.com/openai/CLIP.git</code>会先克隆后面地址对应的仓库，然后执行克隆仓库中的<code>setup.py</code>文件安装需要的包。</p><p>Ok这样就完成了！其它项目也是参照项目说明安装相关的包即可，这里利用docker可以省去安装CUDA Toolkit以及pytorch的步骤。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/qq_38262728/article/details/88744268">Conda环境复制的方法_conda 复制环境-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>AI-env</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-DL环境常用工具</title>
    <link href="/2024/07/14/AI-env/2-DL%E7%8E%AF%E5%A2%83%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    <url>/2024/07/14/AI-env/2-DL%E7%8E%AF%E5%A2%83%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="资源监视nvitop"><a href="#资源监视nvitop" class="headerlink" title="资源监视nvitop"></a>资源监视nvitop</h2><p><code>pip install nvitop</code>即可，该工具可以实时监视GPU、CPU和内存的使用情况</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240714092722812.png" alt="image-20240714092722812"></p><h2 id="终端分屏和会话保存工具"><a href="#终端分屏和会话保存工具" class="headerlink" title="终端分屏和会话保存工具"></a>终端分屏和会话保存工具</h2><ol><li>tmux</li></ol><blockquote><p><code>tmux</code> 是一个终端多路复用器，它允许用户在一个终端窗口内运行多个终端会话。使用 <code>tmux</code>，你可以在单个窗口中创建多个会话、窗口和面板，并且可以在它们之间切换。<code>tmux</code> 提供了一种方便的方法来管理长时间运行的命令和任务，使得在网络连接中断时能够保持会话的持续性。</p></blockquote><p><code>tmux</code>命令可以直接进入一个新的会话，新会话中可以执行以下命令</p><p><code>ctrl + b</code> 是进入命令模式</p><ol><li>ctrl+b, <em>%</em> 是<strong>左右分屏</strong></li><li>ctrl+b, <em>”</em> 是<strong>上下分屏</strong></li><li>ctrl+b, 方向键切换窗口</li><li>退出当前窗口在终端输入 exit然后按enter即可（不用按ctrl+b）</li><li>ctrl + b 后按 <code>[</code> 进入复制模式，然后按方向键或者pgup、pgdn键可以上下翻页，q退出复制模式</li><li><code>ctrl + b ，d </code>是将tmux挂在后台继续运行，这个非常好用，如果在训练一个任务时，可以将这个会话挂起，它会一直在后台运行</li></ol><p>我们可以用以下命令来管理会话</p><ol><li>tmux ls 查看后台运行的tmux窗口</li><li>tmux attach -t 窗口id 重新进入tmux窗口</li><li>ctrl + b 后按$,可以重命名session，下次进入该session就是 tmux attach -t new_name；或者用<code>tmux rename-session -t 5 aoi</code>，5是old_name, aoi是new_name</li><li><code>tmux kill-session -t session-name</code>，杀死后台session，给定会话名即可</li></ol><h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h2><p>由于DL环境一般在linux系统中进行，因此了解一些常用linux命令很有必要</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看本地时间</span><br>date  # Sun Jul 14 01:42:12 UTC 2024<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改时区</span><br>apt install tzdata  # 然后执行date看看时间是否正确<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>AI-env</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DL工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fluid-0-常用命令</title>
    <link href="/2024/07/10/hexo/fluid-0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/07/10/hexo/fluid-0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="创建发表文章"><a href="#创建发表文章" class="headerlink" title="创建发表文章"></a>创建发表文章</h2><p><code>hexo n post xxx</code>:会直接在比克根目录下的<code>source/_posts</code>下生成<code>xxx.md</code>文件，并且标题也是xxx<br>如果我们想要将生成的文件放在_posts的子文件夹内，可以采用命令：<code>hexo n post -p dir/文件名 &quot;标题&quot;</code>，注意这里必须要有标题，否则会默认为post</p><p>生成的文章会在开头带有日期，标题，tags等，你可以自定义文章开头带有哪些内容，在博客根目录<code>scaffolds/post.md</code>中修改，下面是我的内容</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs md">---<br><span class="hljs-section"># categories：AI,Kits,Hexo</span><br>title: &#123;&#123; title &#125;&#125;<br>date: &#123;&#123; date &#125;&#125;<br>tags: []<br>categories: []<br><span class="hljs-section">category<span class="hljs-emphasis">_bar: true  # 文章会显示类别面板，类似目录面板</span></span><br><span class="hljs-emphasis"><span class="hljs-section">---</span></span><br></code></pre></td></tr></table></figure><p>创建完之后，用<code>hexo clean、hexo g、hexo d</code>即可将内容发布到网站上，部署之前可以用<code>hexo s</code>来查看效果，满意之后再用<code>hexo d</code>进行发布。</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cn-clip</title>
    <link href="/2024/07/10/multimodal/01_CN-CLIP/"/>
    <url>/2024/07/10/multimodal/01_CN-CLIP/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://github.com/OFA-Sys/Chinese-CLIP">Chinese-CLIP</a>是基于CLIP和Chinese RoBERTa（中文语言模型）开发的中文版本的CLIP模型。</p><h2 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h2><p>首先，总体数据如下</p><blockquote><p>We extract the Chinese data (with the mark “zh”) from the latest LAION-5B (Schuhmann et al., 2021), and collect the data from the Wukong dataset. However, due to the problems of unavailable links, we can only collect around 108 million samples and 72 million samples from LAION-5B and Wukong respectively. We additionally add the translated data from the classic English multimodal datasets, including Visual Genome (Krishna et al., 2017) and MSCOCO (Chen et al., 2015), where test sets are removed. Finally, we construct a dataset for Chinese multimodal pretraining with around 200 million image-text pairs</p></blockquote><p>来自LAION-5B中文部分数据共108M、Wukong中文数据共72M、MSCOCO和Visual Genome翻译后的中文数据（没有用测试集）。<strong>并且添加了内部高质量数据集约20M，加一起一共是200M图文对中文预训练数据集</strong>。</p><p>有了数据，如何训练CN-CLIP模型呢？</p><p>作者认为如果随机初始化Image Encoder和Text Encoder参数，模型的效果会受到当前数据质量的影响。因此作者采用了其它已训练好的模型参数来初始化Image Encoder和Text Encoder，具体如下：</p><blockquote><p>To leverage the advantages of existent pretrained models, we initialize the models with weights from the pretrained checkpoints from the official release of CLIP 4 for the image encoder, and RoBERTa-wwm-ext and RBT3 5 for the text encoder.</p></blockquote><p>接下来就是让模型适应我们的数据，让模型在我们的数据上进行微调就可以，损失函数和CLIP是一样的，不过和普通微调不一样的是，作者这里用了两阶段微调（就是完整训练流程里面的2，3部分），因为作者认为只用LiT微调是不够的。</p><blockquote><p>To adapt the model to the introduced pretraining data, it is available to pretrain it with “contrastive tuning”, similar to the way to transfer CLIP to downstream retrieval data. In comparison with contrastive tuning, Locked-image Tuning (LiT) (Zhai et al., 2022) demonstrated improved performance in downstream transfer.</p><p>It is not sufficient to pretrain Chinese CLIP with solely LiT, as the image encoder should learn the information of the images of the Chinese datasets and model the distribution of such data.</p></blockquote><p>两阶段训练具体细节：第一阶段训练模型使其在下游任务中没有显著提升时开始第二阶段的训练。</p><blockquote><p>In Stage 1, we “lock” the image encoder by freezing its parameters during pretraining. We only pretrain the text encoder for vision-language alignment, based on the assumption that the vision backbone with pretrained weights is already a powerful vision foundation model (Zhai et al., 2022; Gu et al., 2022). We pretrain it until there is no salient performance improvement in downstream tasks, even if we prolong the pretraining progress. Then we switch to Stage 2, where we “unlock” the image encoder by enabling its optimization. In Stage 2, we continue pretraining without any parameter frozen, so that the image encoder can learn to model the distribution of the image data from Chinese websites.</p></blockquote><p>问题1：两次微调训练是所用数据是一样的吗？</p><p>答：作者这里没有提及两次训练所用数据的差异，应该是一样的</p><p>问题2：为什么cn-CLIP和beit3-retrieval在flickr30k-cn&#x2F;flickr30k上不管是微调还是zero-shot都差距那么大呢？（大约7个点）</p><p><strong>待回答</strong></p><p>CN-CLIP完整的训练流程如下所示</p><ol><li>分别用Chinese RoBERTa和CLIP的Image Encoder初始化CN_CLIP的Text Encoder和Image Encoder的参数</li><li>冻结Image Encoder网络参数，利用对比学习损失调整Text Encoder网络参数（成为LiT微调lock image tuning）</li><li>解冻Image Encoder网络参数，利用对比学习损失调整Image Encoder和Text Encoder的网络参数</li></ol><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240702100928957.png" alt="image-20240702100928957"></p><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>先克隆项目到本地，然后根据官方说明进行配置即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install -r requirements.txt<br>cd Chinese-CLIP<br>pip install -e .<br></code></pre></td></tr></table></figure><p>执行下面命令测试环境是否配置完成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch <br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><span class="hljs-keyword">import</span> cn_clip.clip <span class="hljs-keyword">as</span> clip<br><span class="hljs-keyword">from</span> cn_clip.clip <span class="hljs-keyword">import</span> load_from_name, available_models<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Available models:&quot;</span>, available_models())  <br><span class="hljs-comment"># Available models: [&#x27;ViT-B-16&#x27;, &#x27;ViT-L-14&#x27;, &#x27;ViT-L-14-336&#x27;, &#x27;ViT-H-14&#x27;, &#x27;RN50&#x27;]</span><br><br>device = <span class="hljs-string">&quot;cuda&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span><br>model, preprocess = load_from_name(<span class="hljs-string">&quot;ViT-B-16&quot;</span>, device=device, download_root=<span class="hljs-string">&#x27;./&#x27;</span>)<br>model.<span class="hljs-built_in">eval</span>()<br>image = preprocess(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;examples/pokemon.jpeg&quot;</span>)).unsqueeze(<span class="hljs-number">0</span>).to(device)<br>text = clip.tokenize([<span class="hljs-string">&quot;杰尼龟&quot;</span>, <span class="hljs-string">&quot;妙蛙种子&quot;</span>, <span class="hljs-string">&quot;小火龙&quot;</span>, <span class="hljs-string">&quot;皮卡丘&quot;</span>]).to(device)<br><br><span class="hljs-keyword">with</span> torch.no_grad():<br>    image_features = model.encode_image(image)<br>    text_features = model.encode_text(text)<br>    <span class="hljs-comment"># 对特征进行归一化，请使用归一化后的图文特征用于下游任务</span><br>    image_features /= image_features.norm(dim=-<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>) <br>    text_features /= text_features.norm(dim=-<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>)    <br><br>    logits_per_image, logits_per_text = model.get_similarity(image, text)<br>    probs = logits_per_image.softmax(dim=-<span class="hljs-number">1</span>).cpu().numpy()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Label probs:&quot;</span>, probs)  <span class="hljs-comment"># [[1.268734e-03 5.436878e-02 6.795761e-04 9.436829e-01]]</span><br></code></pre></td></tr></table></figure><p>会自动下载权重，然后输出图片属于各个text之间的概率。</p><h2 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h2>]]></content>
    
    
    <categories>
      
      <category>multimodal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>multimodal</tag>
      
      <tag>cn-clip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>InterVL</title>
    <link href="/2024/07/10/multimodal/InterVL/"/>
    <url>/2024/07/10/multimodal/InterVL/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
    <categories>
      
      <category>multimodal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>multimodal</tag>
      
      <tag>InterVL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>M2Encoder</title>
    <link href="/2024/07/10/multimodal/M2Encoder/"/>
    <url>/2024/07/10/multimodal/M2Encoder/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>M^2（M-Square）Encoder：通过大规模高效预训练来推进双语言图文理解能力。</p><p><strong>摘要：</strong>虽然以CLIP为代表的VL多模态模型已经发展的很好了，但是由于大规模预训练数据集的相对匮乏导致多语言模型VLM（比如中英）发展相对较缓慢。针对这个问题，团队引入了BM-6B这个双语（中英）数据集，里面有6B多的图文对。这么多的数据训练起来很慢，团队针对这个问题提出了一种叫做分组聚合的对比损失计算方式，可以显著降低通信开销和降低GPU内存占用，训练速度提高了60%。并且他们训练得到的M2Encoder-10B在ImageNet上的zero-shot的top-1分类准确率为88.5%，ImageNet-CN上为80.7%，比之前的SOTA模型分别高2.2%和21.1%。</p><p><strong>可以看到加大规模的中文数据对于之前中文多模态模型有很大的提升</strong>。</p><p><strong>介绍：</strong></p><p>BM-6B数据集的由来，中文部分是从开源数据集和合法网站上爬取的数据，然后经过清洗，数据增强等，得到了3B之多（没有说包含哪些开源中文数据集）；然后英文数据部分来自于开源英文数据集，比如LAION2B-EN，COYO-700M，Datacomp-1B，删除了可能重叠的部分，最终得到了BM（Bilingual multi-modality）-6B。</p>]]></content>
    
    
    <categories>
      
      <category>multimodal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>multimodal</tag>
      
      <tag>M2Encoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>beit3</title>
    <link href="/2024/07/10/multimodal/beit3/"/>
    <url>/2024/07/10/multimodal/beit3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><a href="https://blog.csdn.net/sangedianhao/article/details/136662205">TypeError: Descriptors cannot be created directly.报错分析与解决-CSDN博客</a></li><li>[Unknown model (beit3_large_patch16_384_retrieval) · Issue #1927 · huggingface&#x2F;pytorch-image-models](<a href="https://github.com/huggingface/pytorch-image-models/issues/1927">https://github.com/huggingface/pytorch-image-models/issues/1927</a></li></ol><h2 id="beit3项目源码Bugs"><a href="#beit3项目源码Bugs" class="headerlink" title="beit3项目源码Bugs"></a>beit3项目源码Bugs</h2><h3 id="evaluate-flickr30k"><a href="#evaluate-flickr30k" class="headerlink" title="evaluate-flickr30k"></a>evaluate-flickr30k</h3><p>进行flickr30k数据集上进行retrieval任务时遇到以下bug。</p><p><strong>1、执行下面代码对dataset_flickr30k.json进行tokenizing时出现错误，原因是protobuf版本过高，安装protobuf 3.20.0版本解决。</strong><br>TypeError: Descriptors cannot be created directly.<br>If this call came from a _pb2.py file, your generated code is out of date and must be regenerated with protoc &gt;&#x3D; 3.19.0.<br>If you cannot immediately regenerate your protos, some other possible workarounds are:</p><ol><li>Downgrade the protobuf package to 3.20.x or lower.</li><li>Set PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION&#x3D;python (but this will use pure-Python parsing and will be much slower).<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> RetrievalDataset<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> XLMRobertaTokenizer<br><br>tokenizer = XLMRobertaTokenizer(<span class="hljs-string">&quot;/your_beit3_model_path/beit3.spm&quot;</span>)<br><br>RetrievalDataset.make_flickr30k_dataset_index(<br>    data_path=<span class="hljs-string">&quot;/path/to/your_data&quot;</span>,<br>    tokenizer=tokenizer,<br>    karpathy_path=<span class="hljs-string">&quot;/path/to/your_data&quot;</span>,<br>)<br></code></pre></td></tr></table></figure></li></ol><p><strong>2、在flickr30k数据集上评估模型的beit3_base_itc_patch16_224.pth时，出现的Unknown model (beit3_large_patch16_224_retrieval)，出现这个错误时因为timm中没有包含你指定的模型名称，需要将modeling_finetune.py中的模型导入进来</strong><br>在<code>run_beit3_finetuning.py</code>中加入<code>from modeling_finetune.py import *</code></p><h3 id="在flickr30k-cna数据集微调beit3"><a href="#在flickr30k-cna数据集微调beit3" class="headerlink" title="在flickr30k-cna数据集微调beit3"></a>在flickr30k-cna数据集微调beit3</h3><p>在flickr30k-cna中文数据集上微调beit3时，遇到以下bugs。<br>首先我们需要将flickr30k-cna进行分词：下面分别是beit3.spm采用的sentencepiece分词方式和我用哈工大提供的chinese_roberta_wwm_ext_pytorch模型（WordPiece方式）进行分词的代码。该模型下载地址：<a href="https://huggingface.co/hfl/chinese-roberta-wwm-ext-large">chinese-roberta-wwm-ext</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizer, XLMRobertaTokenizer, RobertaTokenizer<br><span class="hljs-keyword">import</span> sentencepiece <span class="hljs-keyword">as</span> spm<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tokenizer</span>(<span class="hljs-params">text, model_path, <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;xlm&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span> == <span class="hljs-string">&#x27;xlm&#x27;</span>:<br>        tokenizer = XLMRobertaTokenizer(model_path)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span> == <span class="hljs-string">&#x27;bert&#x27;</span>:<br>        tokenizer = BertTokenizer.from_pretrained(model_path)<br>        <span class="hljs-comment">#model_name = &quot;hfl/chinese-roberta-wwm-ext&quot;</span><br>        <span class="hljs-comment">#tokenizer = RobertaTokenizer.from_pretrained(model_name)</span><br><br>    <span class="hljs-comment"># 使用分词器进行分词</span><br>    tokens = tokenizer.tokenize(text)<br>    token_ids = tokenizer.convert_tokens_to_ids(tokens)<br>    <span class="hljs-comment"># 输出结果</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;原句子:&quot;</span>, text)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;分词结果:&quot;</span>, tokens)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Token IDs:&quot;</span>, token_ids)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_vocab</span>(<span class="hljs-params">model_path</span>):<br>    <span class="hljs-comment"># 加载 SentencePiece 模型</span><br>    sp = spm.SentencePieceProcessor()<br>    sp.load(model_path)<br><br>    <span class="hljs-comment"># 获取词表</span><br>    vocab = &#123;sp.id_to_piece(<span class="hljs-built_in">id</span>): <span class="hljs-built_in">id</span> <span class="hljs-keyword">for</span> <span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(sp.get_piece_size())&#125;<br><br>    <span class="hljs-comment"># 打印词表中的前10个词，保存为一个词表文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;vocab_beit3.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> token, token_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(vocab.items())[:]:<br>            f.write(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;token&#125;</span>: <span class="hljs-subst">&#123;token_id&#125;</span>&#x27;</span>+<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 本地目录</span><br>    bert_model_path = <span class="hljs-string">r&#x27;D:\work\token-cn\chinese_roberta_wwm_ext_pytorch&#x27;</span><br>    xlm_model_path = <span class="hljs-string">&#x27;./beit3.spm&#x27;</span><br>    <span class="hljs-comment"># get_vocab(xlm_model_path)</span><br><br>    <span class="hljs-comment"># 输入中文句子</span><br>    text = <span class="hljs-string">&quot;一辆火车缓慢的前行。&quot;</span>   <br>    <span class="hljs-comment">#tokenizer(text, xlm_model_path, &#x27;xlm&#x27;) </span><br>    tokenizer(text, bert_model_path, <span class="hljs-string">&#x27;bert&#x27;</span>) <br></code></pre></td></tr></table></figure><p>1、<strong>compute_indices_weights_cubic not implemented for Half</strong><br>参考：<a href="https://github.com/microsoft/unilm/issues/1056">RuntimeError: “compute_indices_weights_cubic” not implemented for ‘Half’ · Issue #1056 · microsoft&#x2F;unilm (github.com)</a>可以解决。</p><p>2、<strong>不要启用–enable–deepspeed选项</strong>，不然可能出现你的<strong>torchcuxxx与本机cuxxx版本不一致无法编译</strong>的错误。</p><p>3、微调时–sentencepiece-model更换为我们下载的chinese_roberta_wwm_ext_pytorch文件夹，而这个分词模型会缺失bos_token_id和eos_token_id，会导致后面报错。因此需要在<strong>datasets.py中添加下面代码更换tokenizer</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_dataset_by_split</span>(<span class="hljs-params">args, split, is_train=<span class="hljs-literal">True</span></span>):<br><span class="hljs-comment"># 添加下面代码，并将tokenizer=get_sentencepiece_model_for_beit3(args)注释掉</span><br>tokenizer = get_wordpiece_model_for_beit3(args)<br>...<br><br><span class="hljs-comment"># 写get_wordpiece_model_for_beit3(args)中的内容</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_wordpiece_model_for_beit3</span>(<span class="hljs-params">args</span>):<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizer<br>tokenizer = BertTokenizer.from_pretrained(args.sentencepiece_model)<br><span class="hljs-comment"># xxx_id后面数字只要是vocab.txt中未使用的就行，不一定是1，2</span><br>tokenizer.bos_token_id = <span class="hljs-number">1</span><br>tokenzier.eos_token_id = <span class="hljs-number">2</span><br><span class="hljs-keyword">return</span> tokenizer<br></code></pre></td></tr></table></figure><p>4、<strong>出现错误 Expected to mark a variable ready only once</strong></p><blockquote><p>RuntimeError: Expected to mark a variable ready only once. This error is caused by one of the following reasons: 1) Use of a module parameter outside the <code>forward</code> function. Please make sure model parameters are not shared across multiple concurrent forward-backward passes. or try to use _set_static_graph() as a workaround if this module graph does not change during training loop.2) Reused parameters in multiple reentrant backward passes. For example, if you use multiple <code>checkpoint</code> functions to wrap the same part of your model, it would result in the same set of parameters been used by different reentrant backward passes multiple times, and hence marking a variable ready multiple times. DDP does not support such use cases in default. You can try to use _set_static_graph() as a workaround if your module graph does not change over iterations.</p></blockquote><p>原因可能有多种，可以参考<a href="https://zhuanlan.zhihu.com/p/587829165">关于Pytorch分布式训练遇到的问题和一些常用用法 - 知乎 (zhihu.com)</a>，对于beit3来说是checkpoint_activations参数的原因，将此参数去掉即可。实际原理后续查明。</p><h2 id="Beit3网络结构"><a href="#Beit3网络结构" class="headerlink" title="Beit3网络结构"></a>Beit3网络结构</h2><p>下面是构建beit3网络的源码（参考<a href="https://github.com/microsoft/unilm/tree/master/beit3">unilm&#x2F;beit3 at master · microsoft&#x2F;unilm (github.com)</a>网络构建相关代码）</p>]]></content>
    
    
    <categories>
      
      <category>multimodal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>multimodal</tag>
      
      <tag>beit3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>clip</title>
    <link href="/2024/07/10/multimodal/clip/"/>
    <url>/2024/07/10/multimodal/clip/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>CLIP采用对比学习训练检索任务模型。</p><h2 id="训练数据"><a href="#训练数据" class="headerlink" title="训练数据"></a>训练数据</h2><p>CLip：从互联网中收集到的400M图像文本对，ImageNet上的分类能力(zero-shot即不需要事先进行监督训练)比肩ResNet50。</p><h2 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h2><p>下面的伪代码很清楚的说明了CLIP的运行方式。</p><p>图像和文本表示先各自经过图像编码器和文本编码器（比如ViT和Bert）；</p><p>图像编码器输出经过线性映射到指定维度后进行L2正则化;</p><p>文本编码器输出经过线性映射到指定维度后进行L2正则化;</p><p>接着就是计算损失函数了，关于损失函数在下面详细讲解。</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240703164513287.png" alt="image-20240703164513287"></p><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>CLIP训练时对于一个N对图像文本数据的输入，分别经过图像编码器和文本编码器得到N个图像表示向量，N个文本表示向量。计算得到NxN个余弦相似度，为了最大化相匹配的N个图文对余弦相似度值，最小化NxN-N个不匹配的图文对余弦相似度值而更新网络参数。</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240701191810328.png" alt="image-20240701191810328"></p><p>损失函数代码如下：</p><p>损失函数用的是交叉熵损失函数</p><p>w权重可以忽略，x表示的是l向量里面的元素，c表示的是类别索引，比如说logist_per_image，每一个l表示每一张图片与所有文本的余弦相似度值组成的向量。C是一个序列range(0,64)，假设batch为64。以l1为例，是一个包含n个元素的向量，</p><p>l1&#x3D;-log(x1&#x2F;(e^x1+e^x2+…+e^xn))。</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240703180300902.png" alt="image-20240703180300902"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># self.logit_scale = nn.Parameter(torch.ones([]) * np.log(1 / 0.07))</span><br><span class="hljs-comment"># return self.logit_scale.exp()</span><br><br>loss_img = nn.CrossEntropyLoss()<br>loss_txt = nn.CrossEntropyLoss()<br><br>image_features, text_features, logit_scale = model(images, texts)<br><br>logits_per_image = logit_scale * image_features @ text_features.t()<br>logits_per_text = logits_per_image.t()<br><br>ground_truth = torch.arange(<span class="hljs-built_in">len</span>(images)).long()<br>total_loss = (<br>    loss_img(logits_per_image, ground_truth)<br>    + loss_txt(logits_per_text, ground_truth)<br>) / <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>为什么需要对余弦相似度添加一个系数呢，该系数初始化为<code>exp(np.log(1 / 0.07))</code>?</p>]]></content>
    
    
    <categories>
      
      <category>multimodal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>multimodal</tag>
      
      <tag>clip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多模态微调</title>
    <link href="/2024/07/10/multimodal/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83/"/>
    <url>/2024/07/10/multimodal/%E5%A4%9A%E6%A8%A1%E6%80%81%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>多模态模型微调<br>下面记录微调beit3和chinese-clip的一些经验。</p><h2 id="beit3微调"><a href="#beit3微调" class="headerlink" title="beit3微调"></a>beit3微调</h2><p>主要是检索任务微调，其实官方已经给出了在flickr30k和coco-cn上微调的脚本，一起看一下微调base和large时参数有哪些不同。</p><h2 id="Chinese-clip"><a href="#Chinese-clip" class="headerlink" title="Chinese-clip"></a>Chinese-clip</h2><p>官方只给出了coco-cn和flickckr30k上微调clip_cn_vit-b-16.pt的脚本，当以更大权重为基础进行微调时可能需要改一些参数。</p>]]></content>
    
    
    <categories>
      
      <category>multimodal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>multimodal</tag>
      
      <tag>多模态微调</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分词方法</title>
    <link href="/2024/07/10/multimodal/%E5%88%86%E8%AF%8D%E6%96%B9%E6%B3%95/"/>
    <url>/2024/07/10/multimodal/%E5%88%86%E8%AF%8D%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Tokenization（分词） 在自然语言处理(NLP)的任务中是最基本的一步，<strong>把文本内容处理为最小基本单元即token</strong>(标记，令牌，词元，没有准确的翻译)用于后续的处理，如何把文本处理成token呢？有一系列的方法，基本思想是<strong>构建一个词表通过词表一一映射进行分词</strong>，但如何构建合适的词表呢？下面以下以<strong>分词粒度为角度</strong>进行技术区分。</p><p>简单来说分词就是将文本句子通过一个词表映射为一串数字，词表里面是一个个词元-数字对。</p><h2 id="1-word（词）粒度"><a href="#1-word（词）粒度" class="headerlink" title="1.word（词）粒度"></a>1.word（词）粒度</h2><p>在英文语系中，word（词）级别分词实现很简单，因为有天然的分隔符。 在中文里面word（词）粒度，需要一些分词工具比如jieba，以下是中文和英文的例子：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">中文句子：我喜欢看电影和读书。<br>分词结果：我 |<span class="hljs-string"> 喜欢 </span>|<span class="hljs-string"> 看 </span>|<span class="hljs-string"> 电影 </span>|<span class="hljs-string"> 和 </span>|<span class="hljs-string"> 读书。</span><br><span class="hljs-string">英文句子：I enjoy watching movies and reading books.</span><br><span class="hljs-string">分词结果：I </span>|<span class="hljs-string"> enjoy </span>|<span class="hljs-string"> watching </span>|<span class="hljs-string"> movies </span>|<span class="hljs-string"> and </span>|<span class="hljs-string"> reading </span>|<span class="hljs-string"> books.</span><br></code></pre></td></tr></table></figure><p>word（词）粒度的优点有：</p><ul><li><strong>语义明确</strong>：以词为单位进行分词可以更好地保留每个词的语义，使得文本在后续处理中能够更准确地表达含义。</li><li><strong>上下文理解</strong>：以词为粒度进行分词有助于保留词语之间的关联性和上下文信息，从而在语义分析和理解时能够更好地捕捉句子的意图。</li></ul><p>缺点：</p><ul><li><strong>长尾效应和稀有词问题</strong>： 词表可能变得巨大，包含很多不常见的词汇，增加存储和训练成本，稀有词的训练数据有限，难以获得准确的表示。</li><li><strong>OOV（Out-of-Vocabulary）</strong>： 词粒度分词模型只能使用词表中的词来进行处理，无法处理词表之外的词汇，这就是所谓的OOV问题。</li><li><strong>形态关系和词缀关系</strong>： 无法捕捉同一词的不同形态，也无法有效学习词缀在不同词汇之间的共通性，限制了模型的语言理解能力，比如love和loves在word（词）粒度的词表中将会是两个词。</li></ul><h2 id="2-char（字符）粒度"><a href="#2-char（字符）粒度" class="headerlink" title="2.char（字符）粒度"></a>2.char（字符）粒度</h2><p>以字符为单位进行分词，即将文本拆分成一个个单独的字符作为最小基本单元，这种字符粒度的分词方法适用于多种语言，无论是英文、中文还是其他不同语言，都能够一致地使用字符粒度进行处理，因为英文就26个字母以及其他的一些符号，中文常见字就6000个左右。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">中文句子：我喜欢看电影和读书。<br>分词结果：我 |<span class="hljs-string"> 喜 </span>|<span class="hljs-string"> 欢 </span>|<span class="hljs-string"> 看 </span>|<span class="hljs-string"> 电 </span>|<span class="hljs-string"> 影 </span>|<span class="hljs-string"> 和 </span>|<span class="hljs-string"> 读 </span>|<span class="hljs-string"> 书 </span>|<span class="hljs-string"> 。</span><br><span class="hljs-string"></span><br><span class="hljs-string">英文句子：I enjoy watching movies and reading books.</span><br><span class="hljs-string">分词结果：I </span>|<span class="hljs-string">   </span>|<span class="hljs-string"> e </span>|<span class="hljs-string"> n </span>|<span class="hljs-string"> j </span>|<span class="hljs-string"> o </span>|<span class="hljs-string"> y </span>|<span class="hljs-string">   </span>|<span class="hljs-string"> w </span>|<span class="hljs-string"> a </span>|<span class="hljs-string"> t </span>|<span class="hljs-string"> c </span>|<span class="hljs-string"> h </span>|<span class="hljs-string"> i </span>|<span class="hljs-string"> n </span>|<span class="hljs-string"> g </span>|<span class="hljs-string">   </span>|<span class="hljs-string"> m </span>|<span class="hljs-string"> o </span>|<span class="hljs-string"> v </span>|<span class="hljs-string"> i </span>|<span class="hljs-string"> e </span>|<span class="hljs-string"> s </span>|<span class="hljs-string">   </span>|<span class="hljs-string"> a </span>|<span class="hljs-string"> n </span>|<span class="hljs-string"> d </span>|<span class="hljs-string">   </span>|<span class="hljs-string"> r </span>|<span class="hljs-string"> e </span>|<span class="hljs-string"> a </span>|<span class="hljs-string"> d </span>|<span class="hljs-string"> i </span>|<span class="hljs-string"> n </span>|<span class="hljs-string"> g </span>|<span class="hljs-string">   </span>|<span class="hljs-string"> b </span>|<span class="hljs-string"> o </span>|<span class="hljs-string"> o </span>|<span class="hljs-string"> k </span>|<span class="hljs-string"> s </span>|<span class="hljs-string"> .</span><br></code></pre></td></tr></table></figure><p>char（字符）粒度的优点有：</p><ul><li><strong>统一处理方式</strong>：字符粒度分词方法适用于不同语言，无需针对每种语言设计不同的分词规则或工具，具有通用性。</li><li><strong>解决OOV问题</strong>：由于字符粒度分词可以处理任何字符，无需维护词表，因此可以很好地处理一些新创词汇、专有名词等问题。</li></ul><p>缺点：</p><ul><li><strong>语义信息不明确</strong>：字符粒度分词无法直接表达词的语义，可能导致在一些语义分析任务中效果较差。</li><li><strong>处理效率低</strong>：由于文本被拆分为字符，处理的粒度较小，增加后续处理的计算成本和时间。</li></ul><h2 id="3-subword（子词）粒度"><a href="#3-subword（子词）粒度" class="headerlink" title="3.subword（子词）粒度"></a>3.subword（子词）粒度</h2><p>在很多情况下，既不希望将文本切分成单独的词（太大），也不想将其切分成单个字符（太小），而是希望得到介于词和字符之间的子词单元。这就引入了 subword（子词）粒度的分词方法，常见的子词算法有<em>BPE、BBPE、Unigram、WordPiece、SentencePiece</em>等</p><h3 id="3-1-WordPiece"><a href="#3-1-WordPiece" class="headerlink" title="3.1 WordPiece"></a>3.1 WordPiece</h3><p>WordPiece核心思想是将单词拆分成多个前缀符号（比如BERT中的##）最小单元，再通过子词合并规则将最小单元进行合并为子词级别。例如对于单词”word”，拆分如下：</p><p>然后通过合并规则进行合并，从而循环迭代构建出一个词表，以下是核心步骤：</p><ol><li>计算初始词表：通过训练语料获得或者最初的英文中26个字母加上各种符号以及常见中文字符，这些作为初始词表。</li><li>计算合并分数：对训练语料拆分的多个子词单元通过合拼规则计算合并分数。</li><li>合并分数最高的子词对：选择分数最高的子词对，将它们合并成一个新的子词单元，并更新词表。</li><li>重复合并步骤：不断重复步骤 2 和步骤 3，直到达到预定的词表大小、合并次数，或者直到不再有有意义的合并（即，进一步合并不会显著提高词表的效益）。</li><li>分词：使用最终得到的词汇表对文本进行分词。</li></ol><p>简单举例：</p><p>我们有以下的训练语料中的样例，括号中第2位为在训练语料中出现的频率：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-string">&quot;hug&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;pug&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;pun&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">12</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;bun&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;hugs&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>我们对其进行拆分为带前缀的形式：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">(<span class="hljs-string">&quot;h&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#g</span>&quot;</span>, <span class="hljs-number">10</span>), (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#g</span>&quot;</span>, <span class="hljs-number">5</span>), (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#n</span>&quot;</span>, <span class="hljs-number">12</span>), (<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#n</span>&quot;</span>, <span class="hljs-number">4</span>), (<span class="hljs-string">&quot;h&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#g</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#s</span>&quot;</span>, <span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>所以这些样例的初始词表将会是：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">[<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#g</span>&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#n</span>&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#s</span>&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span>]<br></code></pre></td></tr></table></figure><p>接下来重要的一步进行计算合并分数，也称作互信息（信息论中衡量两个变量之间的关联程度），简单来说就是以下公式来计算</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">score</span><span class="hljs-operator">=</span>(freq_of_pair)/(freq_of_first_element×freq_of_second_element)<br>分数 <span class="hljs-operator">=</span> 合并pair候选的频率 / (第一个元素的频率 × 第二个元素的频率)<br></code></pre></td></tr></table></figure><p>对于上述样例中这个pair(“##u”, “##g”)出现的频率是最高的20次，但是”##u”出现的频率是36次， “##g”出现的频率是20次，所以这个pair(“##u”, “##g”)的分数是(20)&#x2F;(36<em>20) &#x3D; 1&#x2F;36，同理计算这个pair(“##g”, “##s”)的分数为(5)&#x2F;(20</em>5) &#x3D; 1&#x2F;20，所以最先合并的pair是(“##g”, “##s”)→(“##gs”)。此时词表和拆分后的的频率将变成以下：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livescript">Vocabulary: [<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#g</span>&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#n</span>&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#s</span>&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#gs</span>&quot;</span>]<br>Corpus: (<span class="hljs-string">&quot;h&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#g</span>&quot;</span>, <span class="hljs-number">10</span>), (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#g</span>&quot;</span>, <span class="hljs-number">5</span>), (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#n</span>&quot;</span>, <span class="hljs-number">12</span>), (<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#n</span>&quot;</span>, <span class="hljs-number">4</span>), (<span class="hljs-string">&quot;h&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#gs</span>&quot;</span>, <span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>重复上述的操作，直到达到你想要的词表的大小</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livescript">Vocabulary: [<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#g</span>&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#n</span>&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#s</span>&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span>, <span class="hljs-string">&quot;#<span class="hljs-subst">#gs</span>&quot;</span>, <span class="hljs-string">&quot;hu&quot;</span>, <span class="hljs-string">&quot;hug&quot;</span>]<br>Corpus: (<span class="hljs-string">&quot;hug&quot;</span>, <span class="hljs-number">10</span>), (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#g</span>&quot;</span>, <span class="hljs-number">5</span>), (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#n</span>&quot;</span>, <span class="hljs-number">12</span>), (<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#u</span>&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#n</span>&quot;</span>, <span class="hljs-number">4</span>), (<span class="hljs-string">&quot;hu&quot;</span> <span class="hljs-string">&quot;#<span class="hljs-subst">#gs</span>&quot;</span>, <span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>代码实现:</p><p>用一些包含中英文的文本作为训练语料，因为英文有天然的分隔符，所以在这个例子中，中文已经进行了分词：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">sentences</span> = [<br>    <span class="hljs-string">&quot;我&quot;</span>,<br>    <span class="hljs-string">&quot;喜欢&quot;</span>,<br>    <span class="hljs-string">&quot;吃&quot;</span>,<br>    <span class="hljs-string">&quot;苹果&quot;</span>,<br>    <span class="hljs-string">&quot;他&quot;</span>,<br>    <span class="hljs-string">&quot;不&quot;</span>,<br>    <span class="hljs-string">&quot;喜欢&quot;</span>,<br>    <span class="hljs-string">&quot;吃&quot;</span>,<br>    <span class="hljs-string">&quot;苹果派&quot;</span>,<br>    <span class="hljs-string">&quot;I like to eat apples&quot;</span>,<br>    <span class="hljs-string">&quot;She has a cute cat&quot;</span>,<br>    <span class="hljs-string">&quot;you are very cute&quot;</span>,<br>    <span class="hljs-string">&quot;give you a hug&quot;</span>,<br>]<br></code></pre></td></tr></table></figure><p>统计每个词出现的频率并初始化初始词表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><span class="hljs-comment"># 构建频率统计</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_stats</span>(<span class="hljs-params">sentences</span>):<br>    stats = defaultdict(<span class="hljs-built_in">int</span>)<br>    <span class="hljs-keyword">for</span> sentence <span class="hljs-keyword">in</span> sentences:<br>        symbols = sentence.split()<br>        <span class="hljs-keyword">for</span> symbol <span class="hljs-keyword">in</span> symbols:<br>            stats[symbol] += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> stats<br><br>stats = build_stats(sentences)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;stats:&quot;</span>, stats)<br><br>alphabet = []<br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> stats.keys():<br>    <span class="hljs-keyword">if</span> word[<span class="hljs-number">0</span>] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> alphabet:<br>        alphabet.append(word[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> word[<span class="hljs-number">1</span>:]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">f&quot;##<span class="hljs-subst">&#123;letter&#125;</span>&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> alphabet:<br>            alphabet.append(<span class="hljs-string">f&quot;##<span class="hljs-subst">&#123;letter&#125;</span>&quot;</span>)<br><br>alphabet.sort()<br><span class="hljs-comment"># 初始词表</span><br>vocab = alphabet.copy()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;alphabet:&quot;</span>, alphabet)<br><br><span class="hljs-comment"># 结果</span><br>stats: defaultdict(&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;, &#123;<span class="hljs-string">&#x27;我&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;喜欢&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;吃&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;苹果&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;他&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;不&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;苹果派&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;I&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;like&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;to&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;eat&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;apples&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;She&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;has&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;cute&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;cat&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;you&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;are&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;very&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;give&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;hug&#x27;</span>: <span class="hljs-number">1</span>&#125;)<br><span class="hljs-comment"># 初始词表</span><br>alphabet: [<span class="hljs-string">&#x27;##a&#x27;</span>, <span class="hljs-string">&#x27;##e&#x27;</span>, <span class="hljs-string">&#x27;##g&#x27;</span>, <span class="hljs-string">&#x27;##h&#x27;</span>, <span class="hljs-string">&#x27;##i&#x27;</span>, <span class="hljs-string">&#x27;##k&#x27;</span>, <span class="hljs-string">&#x27;##l&#x27;</span>, <span class="hljs-string">&#x27;##o&#x27;</span>, <span class="hljs-string">&#x27;##p&#x27;</span>, <span class="hljs-string">&#x27;##r&#x27;</span>, <span class="hljs-string">&#x27;##s&#x27;</span>, <span class="hljs-string">&#x27;##t&#x27;</span>, <span class="hljs-string">&#x27;##u&#x27;</span>, <span class="hljs-string">&#x27;##v&#x27;</span>, <span class="hljs-string">&#x27;##y&#x27;</span>, <span class="hljs-string">&#x27;##果&#x27;</span>, <span class="hljs-string">&#x27;##欢&#x27;</span>, <span class="hljs-string">&#x27;##派&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;不&#x27;</span>, <span class="hljs-string">&#x27;他&#x27;</span>, <span class="hljs-string">&#x27;吃&#x27;</span>, <span class="hljs-string">&#x27;喜&#x27;</span>, <span class="hljs-string">&#x27;我&#x27;</span>, <span class="hljs-string">&#x27;苹&#x27;</span>]<br></code></pre></td></tr></table></figure><p>根据初始词表拆分每个词：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs prolog">splits = &#123;<br>    word: [c if i == <span class="hljs-number">0</span> else f<span class="hljs-string">&quot;##&#123;c&#125;&quot;</span> for i, c in enumerate(word)]<br>    for word in stats.keys()<br>&#125;<br>print(<span class="hljs-string">&quot;splits:&quot;</span>, splits)<br><br># 结果<br>splits: &#123;<span class="hljs-string">&#x27;我&#x27;</span>: [<span class="hljs-string">&#x27;我&#x27;</span>], <span class="hljs-string">&#x27;喜欢&#x27;</span>: [<span class="hljs-string">&#x27;喜&#x27;</span>, <span class="hljs-string">&#x27;##欢&#x27;</span>], <span class="hljs-string">&#x27;吃&#x27;</span>: [<span class="hljs-string">&#x27;吃&#x27;</span>], <span class="hljs-string">&#x27;苹果&#x27;</span>: [<span class="hljs-string">&#x27;苹&#x27;</span>, <span class="hljs-string">&#x27;##果&#x27;</span>], <span class="hljs-string">&#x27;他&#x27;</span>: [<span class="hljs-string">&#x27;他&#x27;</span>], <span class="hljs-string">&#x27;不&#x27;</span>: [<span class="hljs-string">&#x27;不&#x27;</span>], <span class="hljs-string">&#x27;苹果派&#x27;</span>: [<span class="hljs-string">&#x27;苹&#x27;</span>, <span class="hljs-string">&#x27;##果&#x27;</span>, <span class="hljs-string">&#x27;##派&#x27;</span>], <span class="hljs-string">&#x27;I&#x27;</span>: [<span class="hljs-string">&#x27;I&#x27;</span>], <span class="hljs-string">&#x27;like&#x27;</span>: [<span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;##i&#x27;</span>, <span class="hljs-string">&#x27;##k&#x27;</span>, <span class="hljs-string">&#x27;##e&#x27;</span>], <span class="hljs-string">&#x27;to&#x27;</span>: [<span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;##o&#x27;</span>], <span class="hljs-string">&#x27;eat&#x27;</span>: [<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;##a&#x27;</span>, <span class="hljs-string">&#x27;##t&#x27;</span>], <span class="hljs-string">&#x27;apples&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;##p&#x27;</span>, <span class="hljs-string">&#x27;##p&#x27;</span>, <span class="hljs-string">&#x27;##l&#x27;</span>, <span class="hljs-string">&#x27;##e&#x27;</span>, <span class="hljs-string">&#x27;##s&#x27;</span>], <span class="hljs-string">&#x27;She&#x27;</span>: [<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;##h&#x27;</span>, <span class="hljs-string">&#x27;##e&#x27;</span>], <span class="hljs-string">&#x27;has&#x27;</span>: [<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;##a&#x27;</span>, <span class="hljs-string">&#x27;##s&#x27;</span>], <span class="hljs-string">&#x27;a&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>], <span class="hljs-string">&#x27;cute&#x27;</span>: [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;##u&#x27;</span>, <span class="hljs-string">&#x27;##t&#x27;</span>, <span class="hljs-string">&#x27;##e&#x27;</span>], <span class="hljs-string">&#x27;cat&#x27;</span>: [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;##a&#x27;</span>, <span class="hljs-string">&#x27;##t&#x27;</span>], <span class="hljs-string">&#x27;you&#x27;</span>: [<span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;##o&#x27;</span>, <span class="hljs-string">&#x27;##u&#x27;</span>], <span class="hljs-string">&#x27;are&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;##r&#x27;</span>, <span class="hljs-string">&#x27;##e&#x27;</span>], <span class="hljs-string">&#x27;very&#x27;</span>: [<span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;##e&#x27;</span>, <span class="hljs-string">&#x27;##r&#x27;</span>, <span class="hljs-string">&#x27;##y&#x27;</span>], <span class="hljs-string">&#x27;give&#x27;</span>: [<span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;##i&#x27;</span>, <span class="hljs-string">&#x27;##v&#x27;</span>, <span class="hljs-string">&#x27;##e&#x27;</span>], <span class="hljs-string">&#x27;hug&#x27;</span>: [<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;##u&#x27;</span>, <span class="hljs-string">&#x27;##g&#x27;</span>]&#125;<br></code></pre></td></tr></table></figure><p>根据上述提到的计算互信息的分数公式进行计算：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vim">def compute_pair_scores(splits):<br>    letter_freqs = defaultdict(<span class="hljs-keyword">int</span>)<br>    pair_freqs = defaultdict(<span class="hljs-keyword">int</span>)<br>    <span class="hljs-keyword">for</span> word, freq in stats.<span class="hljs-built_in">items</span>():<br>        <span class="hljs-keyword">split</span> = splits[word]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-keyword">split</span>) == <span class="hljs-number">1</span>:<br>            letter_freqs[<span class="hljs-keyword">split</span>[<span class="hljs-number">0</span>]] += freq<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-keyword">split</span>) - <span class="hljs-number">1</span>):<br>            pair = (<span class="hljs-keyword">split</span>[i], <span class="hljs-keyword">split</span>[i + <span class="hljs-number">1</span>])<br>            letter_freqs[<span class="hljs-keyword">split</span>[i]] += freq<br>            pair_freqs[pair] += freq<br>        letter_freqs[<span class="hljs-keyword">split</span>[-<span class="hljs-number">1</span>]] += freq<br><br>    scores = &#123;<br>        pair: freq / (letter_freqs[pair[<span class="hljs-number">0</span>]] * letter_freqs[pair[<span class="hljs-number">1</span>]])<br>        <span class="hljs-keyword">for</span> pair, freq in pair_freqs.<span class="hljs-built_in">items</span>()<br>    &#125;<br>    <span class="hljs-keyword">return</span> scores<br><br>pair_scores = compute_pair_scores(splits)<br><span class="hljs-keyword">for</span> i, key in enumerate(pair_scores.<span class="hljs-built_in">keys</span>()):<br>    <span class="hljs-keyword">print</span>(<span class="hljs-keyword">f</span><span class="hljs-string">&quot;&#123;key&#125;: &#123;pair_scores[key]&#125;&quot;</span>)<br>    <span class="hljs-keyword">if</span> i &gt;= <span class="hljs-number">5</span>:<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>一些结果：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c">(&#x27;喜&#x27;, &#x27;##欢&#x27;): <span class="hljs-number">0.5</span><br>(&#x27;苹&#x27;, &#x27;##果&#x27;): <span class="hljs-number">0.5</span><br>(&#x27;##果&#x27;, &#x27;##派&#x27;): <span class="hljs-number">0.5</span><br>(&#x27;l&#x27;, &#x27;##i&#x27;): <span class="hljs-number">0.5</span><br>(&#x27;##i&#x27;, &#x27;##k&#x27;): <span class="hljs-number">0.5</span><br>(&#x27;##k&#x27;, &#x27;##e&#x27;): <span class="hljs-number">0.125</span><br></code></pre></td></tr></table></figure><p>我们需要的是将分数最高的进行合并然后开始循环迭代，看一看分数最高的pair（子词对）：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">best_pair </span>= <span class="hljs-string">&quot;&quot;</span><br>max_score = None<br>for pair, <span class="hljs-keyword">score </span>in pair_scores.items():<br>    if max_score is None <span class="hljs-keyword">or </span>max_score &lt; <span class="hljs-keyword">score:</span><br><span class="hljs-keyword"></span>        <span class="hljs-keyword">best_pair </span>= pair<br>        max_score = <span class="hljs-keyword">score</span><br><span class="hljs-keyword"></span><br>print(<span class="hljs-keyword">best_pair, </span>max_score)<br><br><span class="hljs-comment"># 结果</span><br>(<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;##h&#x27;</span>) <span class="hljs-number">1</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>结果为(‘S’, ‘##h’) 1.0，所以最先合成的就是(‘S’, ‘##h’)→’##Sh’，合并的函数如下：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">def merge_pair(<span class="hljs-keyword">a</span>, b, splits):<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">word</span> <span class="hljs-keyword">in</span> stats:<br>        <span class="hljs-built_in">split</span> = splits[<span class="hljs-built_in">word</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">split</span>) == <span class="hljs-number">1</span>:<br>            continue<br>        i = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(<span class="hljs-built_in">split</span>) - <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">split</span>[i] == <span class="hljs-keyword">a</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">split</span>[i + <span class="hljs-number">1</span>] == b:<br>                <span class="hljs-built_in">merge</span> = <span class="hljs-keyword">a</span> + b[<span class="hljs-number">2</span>:] <span class="hljs-keyword">if</span> b.startswith(<span class="hljs-string">&quot;##&quot;</span>) <span class="hljs-keyword">else</span> <span class="hljs-keyword">a</span> + b<br>                <span class="hljs-built_in">split</span> = <span class="hljs-built_in">split</span>[:i] + [<span class="hljs-built_in">merge</span>] + <span class="hljs-built_in">split</span>[i + <span class="hljs-number">2</span> :]<br>            <span class="hljs-keyword">else</span>:<br>                i += <span class="hljs-number">1</span><br>        splits[<span class="hljs-built_in">word</span>] = <span class="hljs-built_in">split</span><br>    <span class="hljs-literal">return</span> splits<br></code></pre></td></tr></table></figure><p>最后就是一直进行循环迭代，直到vocab达到了我们想要的数量</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs haxe">vocab_size = <span class="hljs-number">50</span><br><span class="hljs-keyword">while</span> len(vocab) &lt; vocab_size:<span class="hljs-type"></span><br>    scores = compute_pair_scores(splits)<br>    best_pair, max_score = <span class="hljs-string">&quot;&quot;</span>, None<br>    <span class="hljs-keyword">for</span> pair, score <span class="hljs-keyword">in</span> scores.items():<span class="hljs-type"></span><br>        <span class="hljs-keyword">if</span> max_score <span class="hljs-keyword">is</span> None or max_score &lt; score:<span class="hljs-type"></span><br>            best_pair = pair<br>            max_score = score<br>    splits = merge_pair(*best_pair, splits)<br>    <span class="hljs-keyword">new</span><span class="hljs-type">_token</span> = (<br>        best_pair[<span class="hljs-number">0</span>] + best_pair[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>:<span class="hljs-type"></span>]<br>        <span class="hljs-keyword">if</span> best_pair[<span class="hljs-number">1</span>].startswith(<span class="hljs-string">&quot;##&quot;</span>)<br>        <span class="hljs-keyword">else</span> best_pair[<span class="hljs-number">0</span>] + best_pair[<span class="hljs-number">1</span>]<br>    )<br>    vocab.append(<span class="hljs-keyword">new</span><span class="hljs-type">_token</span>)<br><br>print(<span class="hljs-string">&quot;vocab:&quot;</span>, vocab)<br><br><span class="hljs-meta"># 结果</span><br>vocab: <span class="hljs-type"></span>[<span class="hljs-string">&#x27;##a&#x27;</span>, <span class="hljs-string">&#x27;##e&#x27;</span>, <span class="hljs-string">&#x27;##g&#x27;</span>, <span class="hljs-string">&#x27;##h&#x27;</span>, <span class="hljs-string">&#x27;##i&#x27;</span>, <span class="hljs-string">&#x27;##k&#x27;</span>, <span class="hljs-string">&#x27;##l&#x27;</span>, <span class="hljs-string">&#x27;##o&#x27;</span>, <span class="hljs-string">&#x27;##p&#x27;</span>, <span class="hljs-string">&#x27;##r&#x27;</span>, <span class="hljs-string">&#x27;##s&#x27;</span>, <span class="hljs-string">&#x27;##t&#x27;</span>, <span class="hljs-string">&#x27;##u&#x27;</span>, <span class="hljs-string">&#x27;##v&#x27;</span>, <span class="hljs-string">&#x27;##y&#x27;</span>, <span class="hljs-string">&#x27;##果&#x27;</span>, <span class="hljs-string">&#x27;##欢&#x27;</span>, <span class="hljs-string">&#x27;##派&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;不&#x27;</span>, <span class="hljs-string">&#x27;他&#x27;</span>, <span class="hljs-string">&#x27;吃&#x27;</span>, <span class="hljs-string">&#x27;喜&#x27;</span>, <span class="hljs-string">&#x27;我&#x27;</span>, <span class="hljs-string">&#x27;苹&#x27;</span>, <span class="hljs-string">&#x27;Sh&#x27;</span>, <span class="hljs-string">&#x27;喜欢&#x27;</span>, <span class="hljs-string">&#x27;苹果&#x27;</span>, <span class="hljs-string">&#x27;苹果派&#x27;</span>, <span class="hljs-string">&#x27;li&#x27;</span>, <span class="hljs-string">&#x27;lik&#x27;</span>, <span class="hljs-string">&#x27;gi&#x27;</span>, <span class="hljs-string">&#x27;giv&#x27;</span>, <span class="hljs-string">&#x27;##pl&#x27;</span>, <span class="hljs-string">&#x27;##ppl&#x27;</span>, <span class="hljs-string">&#x27;##ry&#x27;</span>, <span class="hljs-string">&#x27;to&#x27;</span>, <span class="hljs-string">&#x27;yo&#x27;</span>, <span class="hljs-string">&#x27;ea&#x27;</span>, <span class="hljs-string">&#x27;eat&#x27;</span>]<br></code></pre></td></tr></table></figure><p>上述就是WordPiece分词方法的代码实现，一般来说最后会在词表中加上一些特殊词汇，以及英文中26个字母加上各种符号以及常见中文字符，不过如果训练语料比较大以及词表比较大那这些应该也是已经包括了，只需要添加特殊词汇：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">all_vocab</span> = vocab + [<span class="hljs-string">&quot;[PAD]&quot;</span>, <span class="hljs-string">&quot;[UNK]&quot;</span>, <span class="hljs-string">&quot;[CLS]&quot;</span>, <span class="hljs-string">&quot;[SEP]&quot;</span>, <span class="hljs-string">&quot;[MASK]&quot;</span>] + other_alphabet<br></code></pre></td></tr></table></figure><p>在大语言模型时代，最常用的分词方法是Byte-Pair Encoding (BPE)和Byte-level BPE(BBPE)，Byte-Pair Encoding (BPE)最初是一种文本压缩算法在15年被引入到NLP用于分词，在训练 GPT 时被 OpenAI 用于tokenization，后续好多模型GPT，RoBERTa等都采用了这种分词方法。Byte-level BPE(BBPE)是于19年在BPE的基础上提出以Byte-level(字节)为粒度的分词方法，目前GPT2，BLOOM，Llama，Falcon等采用的是该分词方法。</p><h3 id="3-2-Byte-Pair-Encoding-BPE"><a href="#3-2-Byte-Pair-Encoding-BPE" class="headerlink" title="3.2 Byte-Pair Encoding (BPE)"></a>3.2 Byte-Pair Encoding (BPE)</h3><p>Byte-Pair Encoding (BPE)核心思想是逐步合并出现频率最高的子词对而不是像Wordpiece计算合并分数，从而构建出一个词汇表，以下是核心步骤：</p><ol><li>计算初始词表：通过训练语料获得或者最初的英文中26个字母加上各种符号以及常见中文字符，这些作为初始词表。</li><li>构建频率统计：统计所有子词单元对（两个连续的子词）在文本中的出现频率。</li><li>合并频率最高的子词对：选择出现频率最高的子词对，将它们合并成一个新的子词单元，并更新词汇表。</li><li>重复合并步骤：不断重复步骤 2 和步骤 3，直到达到预定的词汇表大小、合并次数，或者直到不再有有意义的合并（即，进一步合并不会显著提高词汇表的效益）。</li><li>分词：使用最终得到的词汇表对文本进行分词。</li></ol><p>简单的代码实现：</p><p>用一些包含中英文的文本作为训练语料和上面相同，因为英文有天然的分隔符，所以在这个例子中，中文已经进行了分词：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">sentences</span> = [<br>    <span class="hljs-string">&quot;我&quot;</span>,<br>    <span class="hljs-string">&quot;喜欢&quot;</span>,<br>    <span class="hljs-string">&quot;吃&quot;</span>,<br>    <span class="hljs-string">&quot;苹果&quot;</span>,<br>    <span class="hljs-string">&quot;他&quot;</span>,<br>    <span class="hljs-string">&quot;不&quot;</span>,<br>    <span class="hljs-string">&quot;喜欢&quot;</span>,<br>    <span class="hljs-string">&quot;吃&quot;</span>,<br>    <span class="hljs-string">&quot;苹果派&quot;</span>,<br>    <span class="hljs-string">&quot;I like to eat apples&quot;</span>,<br>    <span class="hljs-string">&quot;She has a cute cat&quot;</span>,<br>    <span class="hljs-string">&quot;you are very cute&quot;</span>,<br>    <span class="hljs-string">&quot;give you a hug&quot;</span>,<br>]<br></code></pre></td></tr></table></figure><p>统计每个词出现的频率并初始化初始词表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 构建频率统计</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_stats</span>(<span class="hljs-params">sentences</span>):<br>    stats = defaultdict(<span class="hljs-built_in">int</span>)<br>    <span class="hljs-keyword">for</span> sentence <span class="hljs-keyword">in</span> sentences:<br>        symbols = sentence.split()<br>        <span class="hljs-keyword">for</span> symbol <span class="hljs-keyword">in</span> symbols:<br>            stats[symbol] += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> stats<br><br>stats = build_stats(sentences)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;stats:&quot;</span>, stats)<br><br>alphabet = []<br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> stats.keys():<br>    <span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> word:<br>        <span class="hljs-keyword">if</span> letter <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> alphabet:<br>            alphabet.append(letter)<br>alphabet.sort()<br><br><span class="hljs-comment"># 初始词表</span><br>vocab = alphabet.copy()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;alphabet:&quot;</span>, alphabet)<br><br><span class="hljs-comment"># 结果</span><br>stats: defaultdict(&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;, &#123;<span class="hljs-string">&#x27;我&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;喜欢&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;吃&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;苹果&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;他&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;不&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;苹果派&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;I&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;like&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;to&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;eat&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;apples&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;She&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;has&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;cute&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;cat&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;you&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;are&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;very&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;give&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;hug&#x27;</span>: <span class="hljs-number">1</span>&#125;)<br><span class="hljs-comment"># 初始词表</span><br>alphabet: [<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;不&#x27;</span>, <span class="hljs-string">&#x27;他&#x27;</span>, <span class="hljs-string">&#x27;吃&#x27;</span>, <span class="hljs-string">&#x27;喜&#x27;</span>, <span class="hljs-string">&#x27;我&#x27;</span>, <span class="hljs-string">&#x27;果&#x27;</span>, <span class="hljs-string">&#x27;欢&#x27;</span>, <span class="hljs-string">&#x27;派&#x27;</span>, <span class="hljs-string">&#x27;苹&#x27;</span>]<br></code></pre></td></tr></table></figure><p>根据初始词表拆分每个词，计算左右pair(子词对)出现的频率</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs prolog">splits = &#123;word: [c for c in word] for word in stats.keys()&#125;<br>print(<span class="hljs-string">&quot;splits:&quot;</span>, splits)<br><br>def compute_pair_freqs(splits):<br>    pair_freqs = defaultdict(int)<br>    for word, freq in stats.items():<br>        split = splits[word]<br>        if len(split) == <span class="hljs-number">1</span>:<br>            continue<br>        for i in range(len(split) - <span class="hljs-number">1</span>):<br>            pair = (split[i], split[i + <span class="hljs-number">1</span>])<br>            pair_freqs[pair] += freq<br>    return pair_freqs<br>pair_freqs = compute_pair_freqs(splits)<br><br>for i, key in enumerate(pair_freqs.keys()):<br>    print(f<span class="hljs-string">&quot;&#123;key&#125;: &#123;pair_freqs[key]&#125;&quot;</span>)<br>    if i &gt;= <span class="hljs-number">5</span>:<br>        break<br><br># 结果<br>splits: &#123;<span class="hljs-string">&#x27;我&#x27;</span>: [<span class="hljs-string">&#x27;我&#x27;</span>], <span class="hljs-string">&#x27;喜欢&#x27;</span>: [<span class="hljs-string">&#x27;喜&#x27;</span>, <span class="hljs-string">&#x27;欢&#x27;</span>], <span class="hljs-string">&#x27;吃&#x27;</span>: [<span class="hljs-string">&#x27;吃&#x27;</span>], <span class="hljs-string">&#x27;苹果&#x27;</span>: [<span class="hljs-string">&#x27;苹&#x27;</span>, <span class="hljs-string">&#x27;果&#x27;</span>], <span class="hljs-string">&#x27;他&#x27;</span>: [<span class="hljs-string">&#x27;他&#x27;</span>], <span class="hljs-string">&#x27;不&#x27;</span>: [<span class="hljs-string">&#x27;不&#x27;</span>], <span class="hljs-string">&#x27;苹果派&#x27;</span>: [<span class="hljs-string">&#x27;苹&#x27;</span>, <span class="hljs-string">&#x27;果&#x27;</span>, <span class="hljs-string">&#x27;派&#x27;</span>], <span class="hljs-string">&#x27;I&#x27;</span>: [<span class="hljs-string">&#x27;I&#x27;</span>], <span class="hljs-string">&#x27;like&#x27;</span>: [<span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>], <span class="hljs-string">&#x27;to&#x27;</span>: [<span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>], <span class="hljs-string">&#x27;eat&#x27;</span>: [<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>], <span class="hljs-string">&#x27;apples&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>], <span class="hljs-string">&#x27;She&#x27;</span>: [<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>], <span class="hljs-string">&#x27;has&#x27;</span>: [<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>], <span class="hljs-string">&#x27;a&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>], <span class="hljs-string">&#x27;cute&#x27;</span>: [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>], <span class="hljs-string">&#x27;cat&#x27;</span>: [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>], <span class="hljs-string">&#x27;you&#x27;</span>: [<span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>], <span class="hljs-string">&#x27;are&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>], <span class="hljs-string">&#x27;very&#x27;</span>: [<span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>], <span class="hljs-string">&#x27;give&#x27;</span>: [<span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>], <span class="hljs-string">&#x27;hug&#x27;</span>: [<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>]&#125;<br><br>(<span class="hljs-string">&#x27;喜&#x27;</span>, <span class="hljs-string">&#x27;欢&#x27;</span>): <span class="hljs-number">2</span><br>(<span class="hljs-string">&#x27;苹&#x27;</span>, <span class="hljs-string">&#x27;果&#x27;</span>): <span class="hljs-number">2</span><br>(<span class="hljs-string">&#x27;果&#x27;</span>, <span class="hljs-string">&#x27;派&#x27;</span>): <span class="hljs-number">1</span><br>(<span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>): <span class="hljs-number">1</span><br>(<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>): <span class="hljs-number">1</span><br>(<span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>): <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>然后开始循环迭代找到出现频率最高的pair(子词对)：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lasso">best_pair = <span class="hljs-string">&quot;&quot;</span><br>max_freq = <span class="hljs-literal">None</span><br>for <span class="hljs-built_in">pair</span>, freq <span class="hljs-keyword">in</span> pair_freqs.items():<br>    <span class="hljs-keyword">if</span> max_freq is <span class="hljs-literal">None</span> <span class="hljs-literal">or</span> max_freq &lt; freq:<br>        best_pair = <span class="hljs-built_in">pair</span><br>        max_freq = freq<br><br>print(best_pair, max_freq)<br></code></pre></td></tr></table></figure><p>结果为【(‘喜’, ‘欢’) 2】，所以最先合成的就是(‘喜’, ‘欢’)→’喜欢’，然后合并的函数如下：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">def merge_pair(<span class="hljs-keyword">a</span>, b, splits):<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">word</span> <span class="hljs-keyword">in</span> stats:<br>        <span class="hljs-built_in">split</span> = splits[<span class="hljs-built_in">word</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">split</span>) == <span class="hljs-number">1</span>:<br>            continue<br><br>        i = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(<span class="hljs-built_in">split</span>) - <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">split</span>[i] == <span class="hljs-keyword">a</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">split</span>[i + <span class="hljs-number">1</span>] == b:<br>                <span class="hljs-built_in">split</span> = <span class="hljs-built_in">split</span>[:i] + [<span class="hljs-keyword">a</span> + b] + <span class="hljs-built_in">split</span>[i + <span class="hljs-number">2</span> :]<br>            <span class="hljs-keyword">else</span>:<br>                i += <span class="hljs-number">1</span><br>        splits[<span class="hljs-built_in">word</span>] = <span class="hljs-built_in">split</span><br>    <span class="hljs-literal">return</span> splits<br></code></pre></td></tr></table></figure><p>最后就是一直进行循环直到vocab达到了我们想要的数量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 假设我们想要的词典为50</span><br>merges = &#123;&#125;<br>vocab_size = <span class="hljs-number">50</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(vocab) &lt; vocab_size:<br>    pair_freqs = compute_pair_freqs(splits)<br>    best_pair = <span class="hljs-string">&quot;&quot;</span><br>    max_freq = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">for</span> pair, freq <span class="hljs-keyword">in</span> pair_freqs.items():<br>        <span class="hljs-keyword">if</span> max_freq <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> max_freq &lt; freq:<br>            best_pair = pair<br>            max_freq = freq<br>    splits = merge_pair(*best_pair, splits)<br>    merges[best_pair] = best_pair[<span class="hljs-number">0</span>] + best_pair[<span class="hljs-number">1</span>]<br>    vocab.append(best_pair[<span class="hljs-number">0</span>] + best_pair[<span class="hljs-number">1</span>])<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;merges:&quot;</span>, merges)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;vocab:&quot;</span>, vocab)<br><br><span class="hljs-comment"># 结果</span><br>merges: &#123;(<span class="hljs-string">&#x27;喜&#x27;</span>, <span class="hljs-string">&#x27;欢&#x27;</span>): <span class="hljs-string">&#x27;喜欢&#x27;</span>, (<span class="hljs-string">&#x27;苹&#x27;</span>, <span class="hljs-string">&#x27;果&#x27;</span>): <span class="hljs-string">&#x27;苹果&#x27;</span>, (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>): <span class="hljs-string">&#x27;at&#x27;</span>, (<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>): <span class="hljs-string">&#x27;cu&#x27;</span>, (<span class="hljs-string">&#x27;cu&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>): <span class="hljs-string">&#x27;cut&#x27;</span>, (<span class="hljs-string">&#x27;cut&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>): <span class="hljs-string">&#x27;cute&#x27;</span>, (<span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>): <span class="hljs-string">&#x27;yo&#x27;</span>, (<span class="hljs-string">&#x27;yo&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>): <span class="hljs-string">&#x27;you&#x27;</span>, (<span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>): <span class="hljs-string">&#x27;ve&#x27;</span>, (<span class="hljs-string">&#x27;苹果&#x27;</span>, <span class="hljs-string">&#x27;派&#x27;</span>): <span class="hljs-string">&#x27;苹果派&#x27;</span>, (<span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>): <span class="hljs-string">&#x27;li&#x27;</span>, (<span class="hljs-string">&#x27;li&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>): <span class="hljs-string">&#x27;lik&#x27;</span>, (<span class="hljs-string">&#x27;lik&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>): <span class="hljs-string">&#x27;like&#x27;</span>, (<span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>): <span class="hljs-string">&#x27;to&#x27;</span>, (<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;at&#x27;</span>): <span class="hljs-string">&#x27;eat&#x27;</span>, (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>): <span class="hljs-string">&#x27;ap&#x27;</span>, (<span class="hljs-string">&#x27;ap&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>): <span class="hljs-string">&#x27;app&#x27;</span>, (<span class="hljs-string">&#x27;app&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>): <span class="hljs-string">&#x27;appl&#x27;</span>, (<span class="hljs-string">&#x27;appl&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>): <span class="hljs-string">&#x27;apple&#x27;</span>, (<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>): <span class="hljs-string">&#x27;apples&#x27;</span>, (<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>): <span class="hljs-string">&#x27;Sh&#x27;</span>, (<span class="hljs-string">&#x27;Sh&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>): <span class="hljs-string">&#x27;She&#x27;</span>, (<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>): <span class="hljs-string">&#x27;ha&#x27;</span>&#125;<br>vocab: [<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;不&#x27;</span>, <span class="hljs-string">&#x27;他&#x27;</span>, <span class="hljs-string">&#x27;吃&#x27;</span>, <span class="hljs-string">&#x27;喜&#x27;</span>, <span class="hljs-string">&#x27;我&#x27;</span>, <span class="hljs-string">&#x27;果&#x27;</span>, <span class="hljs-string">&#x27;欢&#x27;</span>, <span class="hljs-string">&#x27;派&#x27;</span>, <span class="hljs-string">&#x27;苹&#x27;</span>, <span class="hljs-string">&#x27;喜欢&#x27;</span>, <span class="hljs-string">&#x27;苹果&#x27;</span>, <span class="hljs-string">&#x27;at&#x27;</span>, <span class="hljs-string">&#x27;cu&#x27;</span>, <span class="hljs-string">&#x27;cut&#x27;</span>, <span class="hljs-string">&#x27;cute&#x27;</span>, <span class="hljs-string">&#x27;yo&#x27;</span>, <span class="hljs-string">&#x27;you&#x27;</span>, <span class="hljs-string">&#x27;ve&#x27;</span>, <span class="hljs-string">&#x27;苹果派&#x27;</span>, <span class="hljs-string">&#x27;li&#x27;</span>, <span class="hljs-string">&#x27;lik&#x27;</span>, <span class="hljs-string">&#x27;like&#x27;</span>, <span class="hljs-string">&#x27;to&#x27;</span>, <span class="hljs-string">&#x27;eat&#x27;</span>, <span class="hljs-string">&#x27;ap&#x27;</span>, <span class="hljs-string">&#x27;app&#x27;</span>, <span class="hljs-string">&#x27;appl&#x27;</span>, <span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;apples&#x27;</span>, <span class="hljs-string">&#x27;Sh&#x27;</span>, <span class="hljs-string">&#x27;She&#x27;</span>, <span class="hljs-string">&#x27;ha&#x27;</span>]<br></code></pre></td></tr></table></figure><p>再加上一些特殊词汇和其他词汇：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">all_vocab</span> = vocab + [<span class="hljs-string">&quot;[PAD]&quot;</span>, <span class="hljs-string">&quot;[UNK]&quot;</span>, <span class="hljs-string">&quot;[BOS]&quot;</span>, <span class="hljs-string">&quot;[EOS]&quot;</span>] + other_alphabet<br></code></pre></td></tr></table></figure><p>上述就是BPE的代码实现，BPE理论上还是会出现OOV的，当词汇表的大小受限时，一些较少频繁出现的子词和没有在训练过程中见过的子词，就会无法进入词汇表出现OOV，而Byte-level BPE(BBPE)理论上是不会出现这个情况的。</p><h3 id="3-3-Byte-level-BPE-BBPE"><a href="#3-3-Byte-level-BPE-BBPE" class="headerlink" title="3.3 Byte-level BPE(BBPE)"></a>3.3 Byte-level BPE(BBPE)</h3><p>基础知识：</p><p><strong>Unicode：</strong> Unicode 是一种字符集，旨在涵盖地球上几乎所有的书写系统和字符。它为每个字符分配了一个唯一的代码点（code point）用于标识字符。Unicode 不关注字符在计算机内部的具体表示方式，而只是提供了一种字符到代码点的映射。Unicode 的出现解决了字符集的碎片化问题，使得不同的语言和字符能够在一个共同的标准下共存。然而，Unicode 并没有规定如何在计算机内存中存储和传输这些字符。</p><p><strong>UTF-8：</strong> UTF-8（Unicode Transformation Format-8）是一种变长的字符编码方案，它将 Unicode 中的代码点转换为字节序列。UTF-8 的一个重要特点是它是向后兼容 ASCII 的，这意味着标准的 ASCII 字符在 UTF-8 中使用相同的字节表示，从而确保现有的 ASCII 文本可以无缝地与 UTF-8 共存。在 UTF-8 编码中，字符的表示长度可以是1到4个字节，不同范围的 Unicode 代码点使用不同长度的字节序列表示，这样可以高效地表示整个 Unicode 字符集。UTF-8 的编码规则是：</p><ul><li>单字节字符（ASCII 范围内的字符）使用一个字节表示，保持与 ASCII 编码的兼容性。</li><li>带有更高代码点的字符使用多个字节表示。UTF-8 使用特定的字节序列来指示一个字符所需的字节数，以及字符的实际数据。</li></ul><p>例如，英文字母 “A” 的 Unicode 代码点是U+0041，在 UTF-8 中表示为 0x41（与 ASCII 编码相同）；而中文汉字 “你” 的 Unicode 代码点是U+4F60，在 UTF-8 中表示为0xE4 0xBD 0xA0三个字节的序列。</p><p>所以简单的来说：</p><ul><li>Unicode 是字符集，为每个字符分配唯一的代码点。</li><li>UTF-8 是一种基于 Unicode 的字符编码方式，用于在计算机中存储和传输字符。</li></ul><p>**Byte(字节)**：计算机存储和数据处理时，字节是最小的单位。一个字节包含8个(Bit)二进制位，每个位可以是0或1，每位的不同排列和组合可以表示不同的数据，所以一个字节能表示的范围是256个。</p><p>言归正传：</p><p>Byte-level BPE(BBPE)和Byte-Pair Encoding (BPE)区别就是BPE是最小词汇是字符级别，而BBPE是字节级别的，通过UTF-8的编码方式这一个字节的256的范围，理论上可以表示这个世界上的所有字符。</p><p>所以实现的步骤和BPE就是实现的粒度不一样，其他的都是一样的。</p><ol><li>初始词表：构建初始词表，包含一个字节的所有表示(256)。</li><li>构建频率统计：统计所有子词单元对（两个连续的子词）在文本中的出现频率。</li><li>合并频率最高的子词对：选择出现频率最高的子词对，将它们合并成一个新的子词单元，并更新词汇表。</li><li>重复合并步骤：不断重复步骤 2 和步骤 3，直到达到预定的词汇表大小、合并次数，或者直到不再有有意义的合并（即，进一步合并不会显著提高词汇表的效益）。</li><li>分词：使用最终得到的词汇表对文本进行分词。</li></ol><p>简单代码实现，不做赘述，读者朋友们可以自己实现一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br>sentences = [<br>    <span class="hljs-string">&quot;我&quot;</span>,<br>    <span class="hljs-string">&quot;喜欢&quot;</span>,<br>    <span class="hljs-string">&quot;吃&quot;</span>,<br>    <span class="hljs-string">&quot;苹果&quot;</span>,<br>    <span class="hljs-string">&quot;他&quot;</span>,<br>    <span class="hljs-string">&quot;不&quot;</span>,<br>    <span class="hljs-string">&quot;喜欢&quot;</span>,<br>    <span class="hljs-string">&quot;吃&quot;</span>,<br>    <span class="hljs-string">&quot;苹果派&quot;</span>,<br>    <span class="hljs-string">&quot;I like to eat apples&quot;</span>,<br>    <span class="hljs-string">&quot;She has a cute cat&quot;</span>,<br>    <span class="hljs-string">&quot;you are very cute&quot;</span>,<br>    <span class="hljs-string">&quot;give you a hug&quot;</span>,<br>]<br><span class="hljs-comment"># 构建初始词汇表，包含一个字节的256个表示</span><br>initial_vocab = [<span class="hljs-built_in">bytes</span>([byte]) <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>)]<br>vocab = initial_vocab.copy()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;initial_vocab:&quot;</span>, initial_vocab)<br><br><span class="hljs-comment"># 构建频率统计</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_stats</span>(<span class="hljs-params">sentences</span>):<br>    stats = defaultdict(<span class="hljs-built_in">int</span>)<br>    <span class="hljs-keyword">for</span> sentence <span class="hljs-keyword">in</span> sentences:<br>        symbols = sentence.split()<br>        <span class="hljs-keyword">for</span> symbol <span class="hljs-keyword">in</span> symbols:<br>            stats[symbol.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)] += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> stats<br>stats = build_stats(sentences)<br><br>splits = &#123;word: [byte <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> word] <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> stats.keys()&#125;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_pair_freqs</span>(<span class="hljs-params">splits</span>):<br>    pair_freqs = defaultdict(<span class="hljs-built_in">int</span>)<br>    <span class="hljs-keyword">for</span> word, freq <span class="hljs-keyword">in</span> stats.items():<br>        split = splits[word]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(split) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(split) - <span class="hljs-number">1</span>):<br>            pair = (split[i], split[i + <span class="hljs-number">1</span>])<br>            pair_freqs[pair] += freq<br>    <span class="hljs-keyword">return</span> pair_freqs<br><br>pair_freqs = compute_pair_freqs(splits)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge_pair</span>(<span class="hljs-params">pair, splits</span>):<br>    merged_byte = <span class="hljs-built_in">bytes</span>(pair)<br>    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> stats:<br>        split = splits[word]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(split) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">continue</span><br>        i = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(split) - <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">if</span> split[i:i+<span class="hljs-number">2</span>] == pair:  <span class="hljs-comment"># 检查分割中是否有这对字节</span><br>                split = split[:i] + [merged_byte] + split[i + <span class="hljs-number">2</span> :]<br>            <span class="hljs-keyword">else</span>:<br>                i += <span class="hljs-number">1</span><br>        splits[word] = split<br>    <span class="hljs-keyword">return</span> splits<br><br>vocab_size = <span class="hljs-number">50</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(vocab) &lt; vocab_size:<br>    pair_freqs = compute_pair_freqs(splits)<br>    best_pair = ()<br>    max_freq = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">for</span> pair, freq <span class="hljs-keyword">in</span> pair_freqs.items():<br>        <span class="hljs-keyword">if</span> max_freq <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> max_freq &lt; freq:<br>            best_pair = pair<br>            max_freq = freq<br>    splits = merge_pair(best_pair, splits)<br>    merged_byte = <span class="hljs-built_in">bytes</span>(best_pair)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;vocab:&quot;</span>, vocab)<br></code></pre></td></tr></table></figure><p>着重解释一下为什么Byte-level BPE(BBPE)不会出现OOV问题，初始的词表里有256个表示如下：</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sml">[b&#x27;\x00&#x27;, b&#x27;\x01&#x27;, b&#x27;\x02&#x27;, b&#x27;\x03&#x27;, b&#x27;\x04&#x27;, b&#x27;\x05&#x27;, b&#x27;\x06&#x27;, b&#x27;\x07&#x27;, b&#x27;\x08&#x27;, b&#x27;\t&#x27;, b&#x27;\n&#x27;, b&#x27;\x0b&#x27;, b&#x27;\x0c&#x27;, b&#x27;\r&#x27;, b&#x27;\x0e&#x27;, b&#x27;\x0f&#x27;, b&#x27;\x10&#x27;, b&#x27;\x11&#x27;, b&#x27;\x12&#x27;, b&#x27;\x13&#x27;, b&#x27;\x14&#x27;, b&#x27;\x15&#x27;, b&#x27;\x16&#x27;, b&#x27;\x17&#x27;, b&#x27;\x18&#x27;, b&#x27;\x19&#x27;, b&#x27;\x1a&#x27;, b&#x27;\x1b&#x27;, b&#x27;\x1c&#x27;, b&#x27;\x1d&#x27;, b&#x27;\x1e&#x27;, b&#x27;\x1f&#x27;, b&#x27; <span class="hljs-string">&#x27;, b&#x27;</span>!<span class="hljs-string">&#x27;, b&#x27;</span><span class="hljs-string">&quot;&#x27;, b&#x27;#&#x27;, b&#x27;$&#x27;, b&#x27;%&#x27;, b&#x27;&amp;&#x27;, b&quot;</span><span class="hljs-string">&#x27;&quot;, b&#x27;</span>(<span class="hljs-string">&#x27;, b&#x27;</span>)<span class="hljs-string">&#x27;, b&#x27;</span>*<span class="hljs-string">&#x27;, b&#x27;</span>+<span class="hljs-string">&#x27;, b&#x27;</span>,<span class="hljs-string">&#x27;, b&#x27;</span>-<span class="hljs-string">&#x27;, b&#x27;</span>.<span class="hljs-string">&#x27;, b&#x27;</span>/<span class="hljs-string">&#x27;, b&#x27;</span><span class="hljs-number">0</span><span class="hljs-string">&#x27;, b&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;, b&#x27;</span><span class="hljs-number">2</span><span class="hljs-string">&#x27;, b&#x27;</span><span class="hljs-number">3</span><span class="hljs-string">&#x27;, b&#x27;</span><span class="hljs-number">4</span><span class="hljs-string">&#x27;, b&#x27;</span><span class="hljs-number">5</span><span class="hljs-string">&#x27;, b&#x27;</span><span class="hljs-number">6</span><span class="hljs-string">&#x27;, b&#x27;</span><span class="hljs-number">7</span><span class="hljs-string">&#x27;, b&#x27;</span><span class="hljs-number">8</span><span class="hljs-string">&#x27;, b&#x27;</span><span class="hljs-number">9</span><span class="hljs-string">&#x27;, b&#x27;</span>:<span class="hljs-string">&#x27;, b&#x27;</span>;<span class="hljs-string">&#x27;, b&#x27;</span>&lt;<span class="hljs-string">&#x27;, b&#x27;</span>=<span class="hljs-string">&#x27;, b&#x27;</span>&gt;<span class="hljs-string">&#x27;, b&#x27;</span>?<span class="hljs-string">&#x27;, b&#x27;</span>@<span class="hljs-string">&#x27;, b&#x27;</span><span class="hljs-type">A&#x27;</span>, b&#x27;B&#x27;, b&#x27;C&#x27;, b&#x27;D&#x27;, b&#x27;E&#x27;, b&#x27;F&#x27;, b&#x27;G&#x27;, b&#x27;H&#x27;, b&#x27;I&#x27;, b&#x27;J&#x27;, b&#x27;K&#x27;, b&#x27;L&#x27;, b&#x27;M&#x27;, b&#x27;N&#x27;, b&#x27;O&#x27;, b&#x27;P&#x27;, b&#x27;Q&#x27;, b&#x27;R&#x27;, b&#x27;S&#x27;, b&#x27;T&#x27;, b&#x27;U&#x27;, b&#x27;V&#x27;, b&#x27;W&#x27;, b&#x27;X&#x27;, b&#x27;Y&#x27;, b&#x27;Z&#x27;, b&#x27;[<span class="hljs-string">&#x27;, b&#x27;</span>\\<span class="hljs-string">&#x27;, b&#x27;</span>]<span class="hljs-string">&#x27;, b&#x27;</span>^<span class="hljs-string">&#x27;, b&#x27;</span>_&#x27;, b&#x27;`<span class="hljs-string">&#x27;, b&#x27;</span>a&#x27;, b&#x27;b&#x27;, b&#x27;c&#x27;, b&#x27;d&#x27;, b&#x27;e&#x27;, b&#x27;f&#x27;, b&#x27;g&#x27;, b&#x27;h&#x27;, b&#x27;i&#x27;, b&#x27;j&#x27;, b&#x27;k&#x27;, b&#x27;l&#x27;, b&#x27;m&#x27;, b&#x27;n&#x27;, b&#x27;o&#x27;, b&#x27;p&#x27;, b&#x27;q&#x27;, b&#x27;r&#x27;, b&#x27;s&#x27;, b&#x27;t&#x27;, b&#x27;u&#x27;, b&#x27;v&#x27;, b&#x27;w&#x27;, b&#x27;x&#x27;, b&#x27;y&#x27;, b&#x27;z&#x27;, b&#x27;&#123;<span class="hljs-string">&#x27;, b&#x27;</span>|<span class="hljs-string">&#x27;, b&#x27;</span>&#125;<span class="hljs-string">&#x27;, b&#x27;</span>~<span class="hljs-string">&#x27;, b&#x27;</span>\x7f&#x27;, b&#x27;\x80&#x27;, b&#x27;\x81&#x27;, b&#x27;\x82&#x27;, b&#x27;\x83&#x27;, b&#x27;\x84&#x27;, b&#x27;\x85&#x27;, b&#x27;\x86&#x27;, b&#x27;\x87&#x27;, b&#x27;\x88&#x27;, b&#x27;\x89&#x27;, b&#x27;\x8a&#x27;, b&#x27;\x8b&#x27;, b&#x27;\x8c&#x27;, b&#x27;\x8d&#x27;, b&#x27;\x8e&#x27;, b&#x27;\x8f&#x27;, b&#x27;\x90&#x27;, b&#x27;\x91&#x27;, b&#x27;\x92&#x27;, b&#x27;\x93&#x27;, b&#x27;\x94&#x27;, b&#x27;\x95&#x27;, b&#x27;\x96&#x27;, b&#x27;\x97&#x27;, b&#x27;\x98&#x27;, b&#x27;\x99&#x27;, b&#x27;\x9a&#x27;, b&#x27;\x9b&#x27;, b&#x27;\x9c&#x27;, b&#x27;\x9d&#x27;, b&#x27;\x9e&#x27;, b&#x27;\x9f&#x27;, b&#x27;\xa0&#x27;, b&#x27;\xa1&#x27;, b&#x27;\xa2&#x27;, b&#x27;\xa3&#x27;, b&#x27;\xa4&#x27;, b&#x27;\xa5&#x27;, b&#x27;\xa6&#x27;, b&#x27;\xa7&#x27;, b&#x27;\xa8&#x27;, b&#x27;\xa9&#x27;, b&#x27;\xaa&#x27;, b&#x27;\xab&#x27;, b&#x27;\xac&#x27;, b&#x27;\xad&#x27;, b&#x27;\xae&#x27;, b&#x27;\xaf&#x27;, b&#x27;\xb0&#x27;, b&#x27;\xb1&#x27;, b&#x27;\xb2&#x27;, b&#x27;\xb3&#x27;, b&#x27;\xb4&#x27;, b&#x27;\xb5&#x27;, b&#x27;\xb6&#x27;, b&#x27;\xb7&#x27;, b&#x27;\xb8&#x27;, b&#x27;\xb9&#x27;, b&#x27;\xba&#x27;, b&#x27;\xbb&#x27;, b&#x27;\xbc&#x27;, b&#x27;\xbd&#x27;, b&#x27;\xbe&#x27;, b&#x27;\xbf&#x27;, b&#x27;\xc0&#x27;, b&#x27;\xc1&#x27;, b&#x27;\xc2&#x27;, b&#x27;\xc3&#x27;, b&#x27;\xc4&#x27;, b&#x27;\xc5&#x27;, b&#x27;\xc6&#x27;, b&#x27;\xc7&#x27;, b&#x27;\xc8&#x27;, b&#x27;\xc9&#x27;, b&#x27;\xca&#x27;, b&#x27;\xcb&#x27;, b&#x27;\xcc&#x27;, b&#x27;\xcd&#x27;, b&#x27;\xce&#x27;, b&#x27;\xcf&#x27;, b&#x27;\xd0&#x27;, b&#x27;\xd1&#x27;, b&#x27;\xd2&#x27;, b&#x27;\xd3&#x27;, b&#x27;\xd4&#x27;, b&#x27;\xd5&#x27;, b&#x27;\xd6&#x27;, b&#x27;\xd7&#x27;, b&#x27;\xd8&#x27;, b&#x27;\xd9&#x27;, b&#x27;\xda&#x27;, b&#x27;\xdb&#x27;, b&#x27;\xdc&#x27;, b&#x27;\xdd&#x27;, b&#x27;\xde&#x27;, b&#x27;\xdf&#x27;, b&#x27;\xe0&#x27;, b&#x27;\xe1&#x27;, b&#x27;\xe2&#x27;, b&#x27;\xe3&#x27;, b&#x27;\xe4&#x27;, b&#x27;\xe5&#x27;, b&#x27;\xe6&#x27;, b&#x27;\xe7&#x27;, b&#x27;\xe8&#x27;, b&#x27;\xe9&#x27;, b&#x27;\xea&#x27;, b&#x27;\xeb&#x27;, b&#x27;\xec&#x27;, b&#x27;\xed&#x27;, b&#x27;\xee&#x27;, b&#x27;\xef&#x27;, b&#x27;\xf0&#x27;, b&#x27;\xf1&#x27;, b&#x27;\xf2&#x27;, b&#x27;\xf3&#x27;, b&#x27;\xf4&#x27;, b&#x27;\xf5&#x27;, b&#x27;\xf6&#x27;, b&#x27;\xf7&#x27;, b&#x27;\xf8&#x27;, b&#x27;\xf9&#x27;, b&#x27;\xfa&#x27;, b&#x27;\xfb&#x27;, b&#x27;\xfc&#x27;, b&#x27;\xfd&#x27;, b&#x27;\xfe&#x27;, b&#x27;\xff&#x27;]<br></code></pre></td></tr></table></figure><p>通过上述的方式其实是在一直根据训练语料循环迭代合成子词或者词，最后形成词表，比如“苹果”通过UTF-8进行编码后为“\xe8\x8b\xb9\xe6\x9e\x9c”，如果词表里面有，那“苹果”就通过词表映射成了1个表示，准确来说是1个token；如果词表里没有，那就用256中的“\xe8＋\x8b＋\xb9＋\xe6＋\x9e＋\x9c”来表示“苹果”这个词，那就是6个token。在先前的各种分词方法中，如果词典里没有”苹果“这个词，也没有”苹“，”果“这样的子词的话，那就变成了<code>[UNK]</code>。所以在现在的大模型中，以Byte-level BPE(BBPE)这种方式进行分词是不会出现OOV，但词表中如果没有word级别的词的话，一些中英文就会分词分的很细碎，比如Llama在中文上就会把一些词分成多个token其实就是UTF-8后的中文编码，对编码效率以及语义会有影响，于是出现了一些扩充Llama中文词表的工作。</p><h3 id="3-4-SentencePiece"><a href="#3-4-SentencePiece" class="headerlink" title="3.4 SentencePiece"></a>3.4 SentencePiece</h3><p>SentencePiece，顾名思义，它是<strong>把一个句子看作一个整体，再拆成片段</strong>，而没有保留天然的词语的概念。一般地，它<strong>把空格space也当作一种特殊字符来处理，再用BPE或者Unigram算法来构造词汇表</strong>。同时谷歌也推出了一个分词工具包叫SentencePiece，除了集成了BPE、ULM子词算法之外，SentencePiece还能支持字符和词级别的分词。</p><h2 id="3-5-Unigram"><a href="#3-5-Unigram" class="headerlink" title="3.5 Unigram"></a>3.5 Unigram</h2><p>…</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/652520262">LLM大语言模型之Tokenization分词方法（WordPiece，Byte-Pair Encoding (BPE)，Byte-level BPE(BBPE)原理及其代码实现） - 知乎 (zhihu.com)</a></p><p><a href="https://www.jianshu.com/p/b369f001be4a">使用transformers轻松调用bert模型生成中文词向量 - 简书 (jianshu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/630696264">大模型词表扩充必备工具SentencePiece - 知乎 (zhihu.com)</a><br><a href="https://www.jianshu.com/p/d4de091d1367">BPE、WordPiece和SentencePiece - 简书 (jianshu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>multimodal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>multimodal</tag>
      
      <tag>分词方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多模态数据集</title>
    <link href="/2024/07/10/multimodal/%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <url>/2024/07/10/multimodal/%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="图文检索数据集"><a href="#图文检索数据集" class="headerlink" title="图文检索数据集"></a>图文检索数据集</h1><p>beit3预训练所用数据集如下，包括多模态和单模态数据（monomodal）和多模态数据（multimodal）。<br><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/20240621141153.png" alt="beit3所用数据集|925"></p><p>一般测试下游retrieval任务所用数据集包括Flickr30K和COCO。下面是Beit3 SOTA效果（微调后的）。<br><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/20240621141821.png" alt="image.png|700"></p><p>上面所提到的都是英文数据集，不过Flickr30K也有中文版本Flickr30K-CN和Flickr30k-CNA，其中CNA结尾的质量高一些。</p><h2 id="Flickr30k"><a href="#Flickr30k" class="headerlink" title="Flickr30k"></a>Flickr30k</h2><p>包含图像及对其描述的句子，每个图象用5个句子对其进行描述。图像文件夹中有31783张图像，标注文件夹（图像的描述）中是一个results_20130124.token文件。<br>标注文件的示例如下：前面xxx.jpg表示captions对应的图片<br>0       1000092795.jpg#0  Two young guys with shaggy hair look at their …<br>1       1000092795.jpg#1  Two young , White males are outside near many …<br>2       1000092795.jpg#2   Two men in green shirts are standing in a yard .<br>3       1000092795.jpg#3       A man in a blue shirt standing in a garden .<br>4       1000092795.jpg#4            Two friends enjoy time spent together .</p><p>Flickr30k也有中文版本，叫做Flickr30k-CNA，就是将对图片的描述由英文转换为中文。<br>数据集下载地址：<a href="https://pan.baidu.com/s/1Fr5kgzQoCCiDyLGxbX6mJg?pwd=ab6y">https://pan.baidu.com/s/1Fr5kgzQoCCiDyLGxbX6mJg?pwd=ab6y</a> 提取码: ab6y<br><img src="https://cdn.nlark.com/yuque/0/2024/png/26249512/1715393476318-635c0b6f-feaf-4726-9ceb-30c41c30848d.png#averageHue=%23fefdfc&clientId=u497dfce1-70fb-4&from=paste&height=205&id=uaae7619e&originHeight=307&originWidth=815&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=22178&status=done&style=none&taskId=u229cd95a-e2b8-458c-bf4b-9abe48ce7dd&title=&width=543.3333333333334" alt="image.png"><br>flickr30k_test.py可以查看flick30k.tar.gz中token的内容，中文的标注是txt文件，打开就能查看。</p><h2 id="LAION"><a href="#LAION" class="headerlink" title="LAION"></a>LAION</h2><p>该数据是从网络上爬取到的数据集，包含很多种语言。<br>LAION-2B数据集地址：<a href="https://huggingface.co/datasets/IDEA-CCNL/laion2B-multi-chinese-subset">IDEA-CCNL&#x2F;laion2B-multi-chinese-subset · Datasets at Hugging Face</a><br>其中Laion2B多语言多模态数据集中的中文部分，一共143M个图文对。大约占用19GB空间（仅仅是url等文本信息，不包含图片）。下面利用python进行下载。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> wget<br><br><span class="hljs-comment"># 基础URL</span><br>base_url = <span class="hljs-string">&quot;https://huggingface.co/datasets/IDEA-CCNL/laion2B-multi-chinese-subset/resolve/main/data/train-&quot;</span><br><br><span class="hljs-comment"># 下载文件</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">13</span>):<br>    <span class="hljs-comment"># 格式化文件编号为五位数</span><br>    file_num = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i:05d&#125;</span>&quot;</span><br>    <span class="hljs-comment"># 生成文件的完整URL</span><br>    url = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;base_url&#125;</span><span class="hljs-subst">&#123;file_num&#125;</span>-of-00013.parquet&quot;</span><br>    <span class="hljs-comment"># 下载文件</span><br>    wget.download(url)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Downloaded: <span class="hljs-subst">&#123;url&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>LAION-5B完整的下载地址：<a href="https://github.com/opendatalab/laion5b-downloader/blob/main/README-CN.md">laion5b-downloader&#x2F;README-CN.md at main · opendatalab&#x2F;laion5b-downloader (github.com)</a></p><h2 id="AIC-ICC"><a href="#AIC-ICC" class="headerlink" title="AIC-ICC"></a>AIC-ICC</h2><blockquote><p>来源：<a href="https://link.zhihu.com/?target=https://github.com/zhhezhhe/AI_Challenger">https://github.com/zhhezhhe/AI_Challenger</a><br>文章：<a href="https://link.zhihu.com/?target=https://arxiv.org/pdf/1711.06475v1.pdf">https://arxiv.org/pdf/1711.06475v1.pdf</a><br>AIC-ICC是2017年由创新工场、搜狗、今日头条联合主办的首届AI Challenger全球AI挑战赛中发布的中文图像描述数据集<br>数据量级：训练集 21w、验证集 3w、测试集 3w</p></blockquote><p>质量较高的中文检索数据集，比LAION这种直接从网络上爬到的数据质量高很多。和flickr30k、flickr8k、coco这种类似。</p><h2 id="flickr8k"><a href="#flickr8k" class="headerlink" title="flickr8k"></a>flickr8k</h2><p>flickr30k并不包含flickr8k，flickr8k数据相较来说少一些。flickr8k也有对应的中文数据集。</p><h2 id="zero"><a href="#zero" class="headerlink" title="zero"></a>zero</h2><p><a href="https://zero.so.com/download.html">Zero (so.com)</a><br><a href="https://m.thepaper.cn/baijiahao_18496432">从50亿图文中提取中文跨模态新基准Zero，奇虎360全新预训练框架超越多项SOTA (thepaper.cn)</a><br>质量比LAION稍微高一些，是从网络爬取数据经过一些筛选得到的。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/gaoyueace/article/details/80564642">Flickr30k图像标注数据集下载及使用方法_flickr30k下载-CSDN博客</a><br><a href="https://zero.so.com/download.html">flickr30k-CNA官方下载地址</a><br><a href="https://zhuanlan.zhihu.com/p/567189338">Visual-Language多模态数据集梳理 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>multimodal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>multimodal</tag>
      
      <tag>多模态数据集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多模态评价指标</title>
    <link href="/2024/07/10/multimodal/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/"/>
    <url>/2024/07/10/multimodal/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
    <categories>
      
      <category>multimodal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>multimodal</tag>
      
      <tag>多模态评价指标</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-docker基础使用</title>
    <link href="/2024/07/09/AI-env/1-docker%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/07/09/AI-env/1-docker%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Docker只要拉取一个别人配置好环境的镜像，然后基于此镜像创建容器进行开发即可，并且方便移植。</p><h2 id="WIn安装Docker"><a href="#WIn安装Docker" class="headerlink" title="WIn安装Docker"></a>WIn安装Docker</h2><h2 id="镜像获取"><a href="#镜像获取" class="headerlink" title="镜像获取"></a>镜像获取</h2><p>比如我们想下载一个ubuntu镜像，直接在这里<a href="https://hub.docker.com/_/ubuntu">ubuntu - Official Image | Docker Hub</a>搜索ubuntu，然后复制<code>docker pull ubuntu</code>,并且加上对应版本，比如20.04，在具备Docker的终端中执行：<code>docker pull ubuntu:20.04</code>即可获得该镜像。</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240710070005335.png" alt="image-20240710070005335"></p><p><strong>但是我们想找一个配置好conda、pytorch、cuda和cudnn的镜像</strong>。</p><p>我们直接在docker hub上搜索Pytorch，会出现Pytorch官方提供的一系列镜像：</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240710070927689.png" alt="image-20240710070927689"></p><p>这里选择带devel的进行下载，<code>docker pull pytorch/pytorch:2.0.1-cuda11.7-cudnn8-devel</code>,我们选择2.0.1版本的pytorch。</p><p>下载完之后，<code>docker images</code>可以查看到刚才下载的镜像：</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240710083612946.png" alt="image-20240710083612946"></p><p>我们已经把镜像下载下来了，接下来是基于此镜像创建容器。</p><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><p><code>docker images</code>:查看当前存在的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">REPOSITORY                      TAG       IMAGE ID       CREATED         SIZE<br>ultralytics/yolov5              latest    23c76ebd5d7c   9 months ago    7.96GB<br>ubuntu20_torch-cuda11.7_mmd3d   v1.0      f196865743ea   9 months ago    13.5GB<br>pengzhile/pandora               latest    73e531d136bc   10 months ago   261MB<br>ubuntu                          20.04     53df61775e88   2 years ago     72.8MB<br></code></pre></td></tr></table></figure><p>创建一个容器，利用ubuntu镜像创建一个名为raindl的镜像，-t是给容器分配一个伪终端，-i是让容器标准输出在伪终端显示，方便操控容器。</p><p><code>docker run -it -v C:\Users\rain\Downloads\:/file -p 8897:22 --gpus all --shm-size 64g --name raindl ubuntu:20.04</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@65d59ead92dc:/# pwd<br>/<br>root@65d59ead92dc:/# cd /file/<br>root@65d59ead92dc:/file# ls<br>Music  Video  app  datasets  desktop.ini  documents  programs<br></code></pre></td></tr></table></figure><p>创建完容器后，可以在容器中使用GPU，<code>nvidia-smi</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@65d59ead92dc:/usr/local# nvidia-smi<br>Tue Jul  9 22:21:55 2024<br>+---------------------------------------------------------------------------------------+<br>| NVIDIA-SMI 535.104.07             Driver Version: 537.34       CUDA Version: 12.2     |<br>|-----------------------------------------+----------------------+----------------------+<br>| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |<br>| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |<br>|                                         |                      |               MIG M. |<br>|=========================================+======================+======================|<br>|   0  NVIDIA GeForce RTX 3090        On  | 00000000:01:00.0  On |                  N/A |<br>|  0%   31C    P8              29W / 350W |    806MiB / 24576MiB |      0%      Default |<br>|                                         |                      |                  N/A |<br>+-----------------------------------------+----------------------+----------------------+<br></code></pre></td></tr></table></figure><p><strong>新进入一个容器，需要执行<code>apt update</code>更新软件下载链接，方便后续安装软件。</strong></p><p>但是容器里面是没有CUDA Toolkit和cudnn的，也没有conda环境。</p><p><strong>我们可以自己创建，不过没必要，直接用别人创建好环境的镜像即可。</strong></p><p>比如前面拉取到的pytorch&#x2F;pytorch:2.0.1-cuda11.7-cudnn8-devel镜像：</p><p><code>docker run -itv C:\Users\rain\Downloads\:/file -p 8898:22 --gpus all --shm-size 64g --name raindl-cuda pytorch/pytorch:2.0.1-cuda11.7-cudnn8-devel</code></p><p>启动后自动进入&#x2F;workspace目录内，这是该镜像的设置。</p><p>我们查看该容器是否包含配置好的pytorch和cuda，cudnn完整的环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@1a8190a19173:/usr/local/cuda# nvcc -V<br>nvcc: NVIDIA (R) Cuda compiler driver<br>Copyright (c) 2005-2022 NVIDIA Corporation<br>Built on Wed_Jun__8_16:49:14_PDT_2022<br>Cuda compilation tools, release 11.7, V11.7.99<br>Build cuda_11.7.r11.7/compiler.31442593_0<br></code></pre></td></tr></table></figure><p>可以看到已经包含了完整的CUDA11.7</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@1a8190a19173:/usr/local/cuda# python<br>Python 3.10.11 (main, Apr 20 2023, 19:02:41) [GCC 11.2.0] on linux<br>Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import torch</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; torch.cuda.is_available()</span><br>True<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; torch.version.cuda</span><br>&#x27;11.7&#x27;<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; torch.__version__</span><br>&#x27;2.0.1&#x27;<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; torch.backends.cudnn.version()</span><br>8500<br></code></pre></td></tr></table></figure><p>我们的Pytorch也可以使用CUDA和CUDNN加速。</p><p><strong>不过机器上好像没有单独安装CUDNN</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">检查库文件</span><br>(base) root@1a8190a19173:~# ls /usr/local/cuda/lib64/libcudnn*<br>ls: cannot access &#x27;/usr/local/cuda/lib64/libcudnn*&#x27;: No such file or directory<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查版本文件</span><br>(base) root@1a8190a19173:~# cat /usr/local/cuda/include/cudnn_version.h | grep CUDNN_MAJOR -A 2<br>cat: /usr/local/cuda/include/cudnn_version.h: No such file or directory<br></code></pre></td></tr></table></figure><p><strong>用上面方法验证是没有安装的，但是官方验证方法是：</strong></p><blockquote><p>To verify that cuDNN is installed and is running properly, compile the mnistCUDNN sample located in the &#x2F;usr&#x2F;src&#x2F;cudnn_samples_v8 directory in the Debian file.</p><ol><li><p>Copy the cuDNN samples to a writable path.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$cp</span> -r <span class="hljs-regexp">/usr/</span>src<span class="hljs-regexp">/cudnn_samples_v8/</span> <span class="hljs-variable">$HOME</span><br></code></pre></td></tr></table></figure></li><li><p>Go to the writable path.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span>  <span class="hljs-variable">$HOME</span>/cudnn_samples_v8/mnistCUDNN</span><br></code></pre></td></tr></table></figure></li><li><p>Compile the mnistCUDNN sample.</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$make</span> clean &amp;&amp; make</span><br></code></pre></td></tr></table></figure></li><li><p>Run the mnistCUDNN sample.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">./mnistCUDNN</span><br></code></pre></td></tr></table></figure><p>If cuDNN is properly installed and running on your Linux system, you will see a message similar to the following:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Test </span>passed!<br></code></pre></td></tr></table></figure></li></ol></blockquote><p>跟随上面方法试一下，发现没有ministCUDNN文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">(base) root@1a8190a19173:/usr/src/cudnn_samples_v8# ls<br>NVIDIA_SLA_cuDNN_Support.txt<br></code></pre></td></tr></table></figure><p>我们github上下载一下：<a href="https://github.com/johnpzh/cudnn_samples_v8">johnpzh&#x2F;cudnn_samples_v8: cuDNN samples v8.x (github.com)</a></p><p>然后复制到容器的 <code>/</code>目录下面，执行<code>make clean &amp;&amp; make</code>（如果出现<code>fatal error: FreeImage.h: No such file or directory</code>，执行<code>apt update &amp;&amp; apt install libfreeimage3 libfreeimage-dev</code>安装即可，安装完之后，重新执行上述命令）</p><p>然后执行<code>./mnistCUDNN</code>,出现下面字符说明CUDNN是安装成功了的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">...<br>Result of classification: 1 3 5<br>Test passed!<br></code></pre></td></tr></table></figure><p>同样，后续我测试了nvidia提供的<code>nvidia/cuda:11.7.1-cudnn8-devel-ubuntu20.04</code>镜像，虽然用<code>ls /usr/local/cuda/lib64/libcudnn*</code>或者<code>cat /usr/local/cuda/include/cudnn_version.h | grep CUDNN_MAJOR -A 2</code>没有检测到cudnn相关内容，但是其实是已经安装好cudnn的。</p><p>结论：如果用docker创建深度学习环境的话，建议直接下载pytorch提供的devel镜像，比如<code>pytorch/pytorch:2.0.1-cuda11.7-cudnn8-devel</code>,下载之前执行<code>nvidia-smi</code>查看你显卡驱动最高支持的CUDA版本号，你下载的镜像的cuda版本不能超过此版本号。该镜像中包含了完整的CUDA和CUDNN以及Pytorh和conda，省去了我们配置DL环境的很多麻烦。</p><h2 id="vscode连接容器"><a href="#vscode连接容器" class="headerlink" title="vscode连接容器"></a>vscode连接容器</h2><p>我们创建完容器后，可以直接在vscode中连接该容器，方便编写和debbug代码。</p><p>首先安装两个插件：</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240714080055305.png" alt="image-20240714080055305"></p><p>然后点击侧边栏的Docker图标，可以看到你机器上所有镜像和容器，右键要连接的容器，点击<code>attached visual studio code</code>即可进入到该容器之中，我们选择之前<code>pytorch/pytorch:2.0.1-cuda11.7-cudnn8-devel</code>镜像创建的容器（容器名已改为raindl）。</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240714075919470.png" alt="image-20240714075919470"></p><p>进入新建立的容器后，可以执行<code>conda init</code>来使得每次进入终端中自动激活base环境；执行<code>apt update</code>更新系统中关于软件包的最新信息，执行<code>apt update</code>实际原理如下：</p><blockquote><ol><li><strong>读取软件源列表</strong>：<ul><li><code>apt update</code> 首先读取配置文件 <code>/etc/apt/sources.list</code> 以及 <code>/etc/apt/sources.list.d/</code> 目录下的所有文件。这些文件包含了可用的软件仓库及其地址。</li></ul></li><li><strong>连接到软件仓库</strong>：<ul><li>它会尝试连接到每个列出的软件仓库（也称为软件源）以获取最新的软件包信息。这些仓库通常是远程服务器，存储了许多可用的软件包及其元数据。</li></ul></li><li><strong>下载软件包索引文件</strong>：<ul><li><code>apt update</code> 从这些软件仓库下载最新的软件包索引文件。这些索引文件包含了软件包的名称、版本、依赖关系、描述等信息。</li></ul></li><li><strong>更新本地缓存</strong>：<ul><li>下载完成后，<code>apt update</code> 会更新本地的包管理系统缓存，将新的软件包信息存储在本地。这意味着你现在拥有了关于系统上可用软件包的最新信息。</li></ul></li></ol><h3 id="示例输出解释"><a href="#示例输出解释" class="headerlink" title="示例输出解释"></a>示例输出解释</h3><p>运行 <code>apt update</code> 后，你可能会看到如下输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Hit</span>:<span class="hljs-number">1</span> http://archive.ubuntu.com/ubuntu focal InRelease<br><span class="hljs-attribute">Hit</span>:<span class="hljs-number">2</span> http://archive.ubuntu.com/ubuntu focal-updates InRelease<br><span class="hljs-attribute">Hit</span>:<span class="hljs-number">3</span> http://archive.ubuntu.com/ubuntu focal-backports InRelease<br><span class="hljs-attribute">Get</span>:<span class="hljs-number">4</span> http://security.ubuntu.com/ubuntu focal-security InRelease<span class="hljs-meta"> [114 kB]</span><br><span class="hljs-attribute">Fetched</span> <span class="hljs-number">114</span> kB in <span class="hljs-number">1</span>s (<span class="hljs-number">172</span> kB/s)<br><span class="hljs-attribute">Reading</span> package lists... Done<br></code></pre></td></tr></table></figure><ul><li><code>Hit</code>: 表示已经从缓存中获取了该软件源的索引文件，因为它已经是最新的。</li><li><code>Get</code>: 表示从远程服务器下载了新的索引文件。</li><li><code>Fetched</code>: 表示下载了多少数据以及用了多少时间。</li><li><code>Reading package lists... Done</code>: 表示已经成功读取并更新了本地的软件包列表。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>apt update</code> 命令不会实际安装或升级任何软件包。它只是更新系统关于可用软件包的最新信息。这是进行软件包管理的第一步。通常在运行 <code>apt update</code> 后，你可以运行 <code>apt upgrade</code> 或 <code>apt install</code> 来实际升级或安装软件包。</p></blockquote><p>更新好软件包的最新信息后，就可以用<code>apt</code>安装一些工具了，下一篇文章介绍一些常用的工具。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/linjiqin/p/8608975.html">Docker容器的创建、启动、和停止 - Ruthless - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/ljp1919/article/details/106209358">docker拉取的pytorch-gpu版找不到cuda和cudnn的位置，为何？_docker找不到torch-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_44961869/article/details/115954258">Linux下安装cuda和对应版本的cudnn_linux怎么在自己的环境中安装cuda和cudnn-CSDN博客</a></p><p><a href="https://jackfrisht.medium.com/install-nvidia-driver-via-ppa-in-ubuntu-18-04-fc9a8c4658b9">安裝 Nvidia driver Cuda Cudnn on Ubuntu 22.04 | Medium</a></p>]]></content>
    
    
    <categories>
      
      <category>AI-env</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境配置</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0-conda&amp;pip基础使用</title>
    <link href="/2024/07/05/AI-env/0-conda&amp;pip%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/07/05/AI-env/0-conda&amp;pip%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>conda是配置深度学习环境的利器，很方便隔离和配置每个深度学习算法的环境。下面基于windows、Linux、Docker三种方式依次讲解如何配置深度学习环境。</p><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="环境创建和管理"><a href="#环境创建和管理" class="headerlink" title="环境创建和管理"></a>环境创建和管理</h2><h3 id="安装miniconda"><a href="#安装miniconda" class="headerlink" title="安装miniconda"></a>安装miniconda</h3><p>下载miniconda的链接：<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/">清华大学开源软件镜像站</a>，比如 <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py39_23.10.0-1-Linux-x86_64.sh">linux上默认py39版本</a> ，py39和Linux-86-64分别表示默认安装的python版本为3.9，适合平台linux-x64。</p><p>执行命令<code>sh 刚才下载的minicodna版本名称</code>，然后弹出阅读条款，同意license terms处填写<code>yes</code>；接着弹出安装路径，自己选择安装在哪里；接着会问你是否同意自动初始化conda，即每次进入shell时会自动激活conda环境，我们同意此选项即可，后续也可以用<code>conda config --set auto_activate_base false</code>禁止自动激活。</p><p>安装完毕之后，自动创建的conda环境（base）的python版本为3.9，这和你下载的miniconda版本相关。</p><h3 id="conda镜像配置"><a href="#conda镜像配置" class="headerlink" title="conda镜像配置"></a>conda镜像配置</h3><p><code>conda config --show channels</code>可以查看当前codna从哪里下载的包，默认是defaults（国外的官方服务器）</p><p>添加镜像（你的机器方便访问的包下载服务器）</p><p><code>conda config --add channels xxx</code></p><p>比如添加清华大学镜像源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/<br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/<br></code></pre></td></tr></table></figure><p>此时查看<code>~/.condarc</code>文件，可以看到channels下面有你添加的镜像源，后续可以修改此文件方便的添加或者删除镜像源。</p><h3 id="创建和删除环境"><a href="#创建和删除环境" class="headerlink" title="创建和删除环境"></a>创建和删除环境</h3><p><code>conda create -n 环境名 python=xxx</code></p><p><code>conda env remove -n 环境名</code></p><p>可以克隆环境从一个已经创建好的conda环境（同一台机器上）</p><p><code>conda create --name new_env --clone old_env</code></p><h3 id="pip源配置"><a href="#pip源配置" class="headerlink" title="pip源配置"></a>pip源配置</h3><p>OK环境创建好以后，后面就是下载项目所用的各种包了，可以用conda安装也可以用pip安装，conda源已经配好下面配置以下pip源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建~/.pip/pip.conf文件</span><br>vim ~/.pip/pip.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">写入以下内容</span><br>[global]<br>index-url = https://pypi.tuna.tsinghua.edu.cn/simple<br>[install]<br>trusted-host=mirrors.aliyun.com<br></code></pre></td></tr></table></figure><p>上面是永久配置pip源，如果是临时一次安装，可以用<code>-i 源</code>:</p><p><code>pip install xxx -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p><h2 id="Pytorch安装"><a href="#Pytorch安装" class="headerlink" title="Pytorch安装"></a>Pytorch安装</h2><p>pytorch是深度学习的一个框架，很多项目是基于此的，因此这里讲一下如何安装这个包，它的版本与你Nvidia显卡驱动所支持的CUDA版本相关。</p><p>CUDA版本有三个：</p><p>1.GPU安装好驱动以后，会有一个对应的CUDA版本，用<code>nvidia-smi</code>可以查看，比如11.8，该版本表示你后续要安装的CUDA Toolkit Version(runtime version)版本不能超过11.8</p><p>2.CUDA Toolkit Version(runtime version)</p><blockquote><p>CUDA Toolkit Version（也称为运行时版本）是由 NVIDIA 提供的一组软件开发工具，用于创建使用 GPU（图形处理单元）进行并行计算的应用程序。它包含了开发、优化和调试 GPU 加速应用程序所需的库、编译器、驱动程序和工具。</p></blockquote><p>有些项目其实是不需要安装该工具的，比如yolov5，我们只要安装自带cuda的pytorch版本即可，比如：<code>conda install pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidia</code>或者<code>pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118</code>。</p><p><strong>需要注意的是安装pytorch的cuda版本不能超过你驱动所支持的最高CUDA版本。</strong></p><p>这些PyTorch 已经包含了所需的 CUDA 库，可以直接使用 GPU 加速。我们可以用以下代码检测torch是否可以用GPU：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br>torch.__version__  <span class="hljs-comment"># 1.13.1+cu116</span><br><span class="hljs-built_in">print</span>(torch.cuda.is_available())  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(torch.version.cuda)  <span class="hljs-comment"># 11.6</span><br><span class="hljs-built_in">print</span>(torch.backends.cudnn.version()) <span class="hljs-comment"># 8302</span><br></code></pre></td></tr></table></figure><p>上面结果可以看出我们的pytorch完全可以用GPU。</p><p>但是，<strong>有些应用是需要安装CUDA Toolkit的</strong>，比如mmdetection，它包含了一些自定义的 CUDA 操作，这些操作需要在安装时进行编译。安装 CUDA Toolkit 可以确保这些自定义操作能够正确编译和链接。因此建议我们还是安装CUDA Toolkit，以支持更多AI项目。</p><p>3.第三个CUDA版本其实就是前面提到的安装GPU版本的torch时相应的cuda，比如pytorch-cuda&#x3D;11.8，可以将其理解为非完整版的CUDA toolkit</p><p><strong>如果我们安装了CUDA Toolkit完整版的，然后再安装pytorch-cuda，此时pytorch-cuda版本号要和CUDAToolkit版本号一样吗？</strong></p><h2 id="CUDA-Toolkit安装"><a href="#CUDA-Toolkit安装" class="headerlink" title="CUDA Toolkit安装"></a>CUDA Toolkit安装</h2><p>参考官方文档进行安装：<a href="https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html">CUDA Installation Guide for Linux (nvidia.com)</a></p><h2 id="CUDNN安装"><a href="#CUDNN安装" class="headerlink" title="CUDNN安装"></a>CUDNN安装</h2><p>下载：<a href="https://developer.nvidia.com/rdp/cudnn-archive">cuDNN Archive | NVIDIA Developer</a></p><p>选择要安装的版本，这里选择8.5.0，与CUDA11.x都是适配的</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240710100051501.png" alt="image-20240710100051501"></p><p>参考官方文档进行安装：<a href="https://docs.nvidia.com/deeplearning/cudnn/archives/cudnn-891/install-guide/index.html">Installation Guide :: NVIDIA cuDNN Documentation</a></p><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>利用docker配置深度学习环境很方便，参考我的文章：docker配置DL环境（连接失效的话直接搜索）</p><h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/qq_44961869/article/details/115954258">Linux下安装cuda和对应版本的cudnn_linux怎么在自己的环境中安装cuda和cudnn-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>AI-env</category>
      
    </categories>
    
    
    <tags>
      
      <tag>conda</tag>
      
      <tag>pip</tag>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fluid-4-随机更换背景图片</title>
    <link href="/2024/07/04/hexo/fluid-4-%E9%9A%8F%E6%9C%BA%E6%9B%B4%E6%8D%A2%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/"/>
    <url>/2024/07/04/hexo/fluid-4-%E9%9A%8F%E6%9C%BA%E6%9B%B4%E6%8D%A2%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>和之前个性化页脚一样，采用代码注入的方式。</p><p>先定位到背景图片在哪个网页元素中（F12调试），最终定位到是在header的banner中，banner的css属性background中用到了背景图片：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;banner&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;banner&quot;</span> <span class="hljs-attr">data-title</span>=<span class="hljs-string">&quot;&lt;%= img_names %&gt;&quot;</span> &lt;%<span class="hljs-attr">-</span> <span class="hljs-attr">theme.banner</span> &amp;&amp; <span class="hljs-attr">theme.banner.parallax</span> &amp;&amp; &#x27;<span class="hljs-attr">parallax</span>=<span class="hljs-string">true</span>&#x27; %&gt;</span><br>     style=&quot;background: url(&#x27;&lt;%- url_for(banner_img) %&gt;&#x27;) no-repeat center center; background-size: cover;&quot;&gt;<br></code></pre></td></tr></table></figure><p>我们要对background的url值进行修改，只要让每次页面刷新时能够执行一段js代码修改该url值即可。可以采用代码注入的方式，将js代码注入到Fluid主题提供的banner中，而代码注入不能直接注入到banner这一节点，所以我们选择注入header.ejs文件整体替换header中的内容，在header.ejs中注入修改后的banner.ejs即可。具体操作如下：</p><p>主题根目录的scripts文件夹下（没有scripts的请新建）新建一个名为header.js的文件，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">root</span>: siteRoot = <span class="hljs-string">&quot;/&quot;</span> &#125; = hexo.<span class="hljs-property">config</span>;<br><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&quot;body_begin&quot;</span>, <span class="hljs-string">`&lt;div id=&quot;web_bg&quot;&gt;&lt;/div&gt;`</span>);<br><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;theme_inject&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">injects</span>) &#123;<br>    injects.<span class="hljs-property">header</span>.<span class="hljs-title function_">file</span>(<span class="hljs-string">&#x27;default&#x27;</span>, <span class="hljs-string">&#x27;source/_inject/layout/_partials/header.ejs&#x27;</span>, &#123; <span class="hljs-attr">img_names</span>: <span class="hljs-string">&#x27;value&#x27;</span> &#125;);<br>  &#125;<br>  );<br></code></pre></td></tr></table></figure><p>第三行代码直接将<code>&lt;div id=&quot;web_bg&quot;&gt;&lt;/div&gt;</code>注入到body标签开始位置，这个用于后续修改背景图片为全图，具体效果见<a href="https://rainblog.run/">AIrainday (rainblog.run)</a>。</p><p>将Fluid主题文件（到官网下载）中<code>layout\_partials\header.js</code>放在博客项目根目录下的<code>source/_inject/layout/_partials/header.ejs</code>。</p><p>并修改内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;% let dir = process.cwd() %&gt;<br>&lt;%<br>var banner_img_height = parseFloat(page.banner_img_height || theme.index.banner_img_height)<br>%&gt;<br><br>&lt;div class=&quot;header-inner&quot; style=&quot;height: &lt;%= banner_img_height %&gt;vh;&quot;&gt;<br>  &lt;%- partial(&#x27;_partials/header/navigation&#x27;) %&gt;<br>  &lt;!-- &lt;%- partial(&#x27;_partials/header/banner&#x27;) %&gt; --&gt;<br>  &lt;%- include(dir + &#x27;/source/_inject/layout/_partials/header/banner.ejs&#x27;,&#123;img_names: &#x27;value&#x27;&#125;) %&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>我们将自定义的banner.ejs替换header中原始的banner.ejs，然后新建文件<code>source/_inject/layout/_partials/header/banner.ejs</code>，写上想修改的内容即可，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;%<br>var banner_img = page.banner_img || theme.index.banner_img<br>var banner_img_height = parseFloat(page.banner_img_height || theme.index.banner_img_height)<br>var banner_mask_alpha = parseFloat(page.banner_mask_alpha || theme.index.banner_mask_alpha)<br>var subtitle = page.subtitle || page.title<br>%&gt;<br><br>&lt;div id=&quot;banner&quot; class=&quot;banner&quot; data-title=&quot;&lt;%= img_names %&gt;&quot; &lt;%- theme.banner &amp;&amp; theme.banner.parallax &amp;&amp; &#x27;parallax=true&#x27; %&gt;<br>     style=&quot;background: url(&#x27;&lt;%- url_for(banner_img) %&gt;&#x27;) no-repeat center center; background-size: cover;&quot;&gt;<br>  &lt;div class=&quot;full-bg-img&quot;&gt;<br>    &lt;div class=&quot;mask flex-center&quot; style=&quot;background-color: rgba(0, 0, 0, &lt;%= parseFloat(banner_mask_alpha) %&gt;)&quot;&gt;<br>      &lt;div class=&quot;banner-text text-center fade-in-up&quot;&gt;<br>        &lt;div class=&quot;h2&quot;&gt;<br>          &lt;% if(theme.fun_features.typing.enable &amp;&amp; in_scope(theme.fun_features.typing.scope)) &#123; %&gt;<br>            &lt;span id=&quot;subtitle&quot; data-typed-text=&quot;&lt;%= subtitle %&gt;&quot;&gt;&lt;/span&gt;<br>          &lt;% &#125; else &#123; %&gt;<br>            &lt;span id=&quot;subtitle&quot;&gt;&lt;%- subtitle %&gt;&lt;/span&gt;<br>          &lt;% &#125; %&gt;<br>        &lt;/div&gt;<br><br>        &lt;% if (is_post()) &#123; %&gt;<br>          &lt;%- inject_point(&#x27;postMetaTop&#x27;) %&gt;<br>        &lt;% &#125; %&gt;<br>      &lt;/div&gt;<br><br>      &lt;% if (theme.scroll_down_arrow.enable &amp;&amp; theme.scroll_down_arrow.banner_height_limit &lt;= banner_img_height &amp;&amp; page.layout !== &#x27;404&#x27;) &#123; %&gt;<br>        &lt;div class=&quot;scroll-down-bar&quot;&gt;<br>          &lt;i class=&quot;iconfont icon-arrowdown&quot;&gt;&lt;/i&gt;<br>        &lt;/div&gt;<br>      &lt;% &#125; %&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>  function getRandomNumber(min, max) &#123;<br>  min = Math.ceil(min);<br>  max = Math.floor(max);<br>  return Math.floor(Math.random() * (max - min + 1)) + min;<br>&#125;<br><br>var randomNum = getRandomNumber(0, 3).toString();<br><br>var img_names = document.getElementById(&#x27;banner&#x27;).getAttribute(&#x27;data-title&#x27;);<br><br>var banner_img = &quot;/img/rain-random-bg/0&quot; + randomNum + &quot;.jpg&quot;;<br>document.getElementById(&#x27;banner&#x27;).removeAttribute(&#x27;style&#x27;)<br><br>document<br>  .querySelector(&#x27;#web_bg&#x27;)<br>  .setAttribute(&#x27;style&#x27;, `background: url(&#x27;$&#123;banner_img&#125;&#x27;); position: fixed; width: 100%;height: 100%; z-index: -1; background-size: cover;`);<br>  <br>document<br>  .querySelector(&quot;#banner .mask&quot;)<br>  .setAttribute(&#x27;style&#x27;, &#x27;background-color:rgba(0,0,0,0)&#x27;)<br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>该文件是在主题文件<code>layout\_partials\header\banner.ejs</code>基础上修改的，主要添加了一段js代码来提供更换背景图片的功能。</p><p>最后只要将事先准备好的图像放在一个文件夹中，这里放在了<code>rain-random-bg</code>中，然后修改文件名统一为00.jpg,01.jpg…，比如你最多是010.jpg，修改第42行代码<code>var randomNum = getRandomNumber(0, 3).toString();</code>中的3为10即可。</p><p>最后将<code>rain-random-img</code>文件夹放在<code>source/img</code>内即可。依次执行<code>hexo clean、 hexo g、 hexo s</code>可以看到效果。</p><p>上面只引入了全图背景，关于其中css的样式修改会在下一篇文章中详解。</p><p><strong>不好的是每次添加图片到rain-random-bg文件夹中，都要手动修改文件名和最大索引，后续会改善一下。</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://linguoguang.com/2023/05/10/Hexo_Fluid%E9%9A%8F%E6%9C%BA%E8%83%8C%E6%99%AF%E5%9B%BE%E5%AE%9E%E7%8E%B0/">Hexo_Fluid随机背景图实现 - 木木困玉光 (linguoguang.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2024/07/04/tools/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2024/07/04/tools/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>比如想要提取’mdsfmasdf Loss:200003.56 moretext’中的200003.56部分，我们应该怎么做呢。</p><p>正则表达式就是用一系列规则定义的匹配公式，利用该公式找到文本中匹配公式匹配到的内容。</p><p>上面例子的答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>text = <span class="hljs-string">&#x27;mdsfmasdf Loss:200003.56 moretext&#x27;</span><br><br><span class="hljs-comment"># 使用正则表达式查找 &#x27;Loss:&#x27; 后的数字（包括可能的小数点）</span><br><span class="hljs-keyword">match</span> = re.search(<span class="hljs-string">r&#x27;Loss:(\d+(\.\d+)?)&#x27;</span>, text)<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>    full_match = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 整个匹配的字符串 &#x27;Loss:200003.56&#x27;</span><br>    loss_value = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 捕获组 1: &#x27;200003.56&#x27;</span><br>    decimal_part = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 捕获组 2: &#x27;.56&#x27; 或 None</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Full match: <span class="hljs-subst">&#123;full_match&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Extracted loss value: <span class="hljs-subst">&#123;loss_value&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Decimal part: <span class="hljs-subst">&#123;decimal_part&#125;</span>&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No loss value found in the text.&quot;</span>)<br></code></pre></td></tr></table></figure><p>关注第6行代码：<code>match = re.search(r&#39;Loss:(\d+(\.\d+)?)&#39;, text)</code>，有两部分值得关注，第一个就是<code>re.search</code>方法，第二个是表达式<code>r&#39;Loss:(\d+(\.\d+)?)&#39;</code>。</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ol><li><code>re.search(pattern, string, flags=0)</code>：在字符串中查找正则表达式模式的第一次出现，并返回一个匹配对象。如果没有找到匹配项，则返回 <code>None</code></li><li><code>re.match(pattern, string, flags=0)</code>：尝试从字符串的起始位置匹配正则表达式模式。如果匹配成功，则返回匹配对象；否则，返回 <code>None</code>。和search区别是，match只判断字符串开头位置有没有指定表达式模式。</li><li><code>re.findall(pattern, string, flags=0)</code>：查找字符串中所有与正则表达式模式匹配的部分，并以列表形式返回。</li></ol><h2 id="表达式规则"><a href="#表达式规则" class="headerlink" title="表达式规则"></a>表达式规则</h2><p>比如<code>r&#39;Loss:(\d+(\.\d+)?)&#39;</code>，匹配Loss:一个或者多个数字后面可以有 <em>小数点后跟一个或者多个数字</em> ，也可以没有。里面的（）表示的是（）两层含义：</p><ul><li>括号里面内容是一个整体，后面跟量词<code>* + ?</code>时，将括号里的内容看作一个整体，比如<code>(\.\d+)?</code>可以表示<code>.12</code>或者什么也没有。</li><li>（）里面的内容如果匹配到，会被单独拿出来，后续可以用<code>match.group(1)</code>来获取第一个括号所匹配到内容。</li></ul><p>其实还有很多方法，以及规则，具体用到时候在问gpt吧，gpt讲解的还是比较容易理解的。</p>]]></content>
    
    
    <categories>
      
      <category>Kits</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fluid-3-说说功能</title>
    <link href="/2024/06/30/hexo/fluid-3-%E8%AF%B4%E8%AF%B4%E5%8A%9F%E8%83%BD/"/>
    <url>/2024/06/30/hexo/fluid-3-%E8%AF%B4%E8%AF%B4%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="创建应用并使用artitalk"><a href="#创建应用并使用artitalk" class="headerlink" title="创建应用并使用artitalk"></a>创建应用并使用artitalk</h2><p>说说功能可以给博客开辟一个吐槽的地方，可以自己给自己留言，每天记录反省的内容等等。<br>参考文章：<a href="https://www.zywvvd.com/notes/hexo/theme/fluid/fluid-shuoshuo/fluid-shuoshuo/">明眸如初 (zywvvd.com)</a><br>利用leancloud和artitalk来启用此功能，下面主要是记录leancloud域名绑定时的疑惑，也就是文章的第10步：</p><ol><li>leancloud中点击绑定域名，域名填写比如shuoshuo.airainday.top(购买的域名前面加上自定的文字即可)</li><li>购买的域名服务商那里添加一个记录，我的是阿里云买的域名，记录填写内容如下，将leancloud提供的CNAME值填写到记录中的记录值即可<br><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/20240628214406.png" alt="image.png|600"></li></ol><p>等待DNS解析成功，不过出现发送证书失败，还是和之前问题一样：<strong>国际版其实不绑定域名也能用，但是只能在国外网络环境中访问，国内无法访问，必须绑定一个备案后的域名才行，由于这里绑定的域名没有备案，因此会出现申请证书失败的错误。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/20240629130333.png" alt="image.png|600"></p><p><strong>不绑定域名时</strong></p><p>我们按照这里创建好应用，不绑定域名，然后在博客目录的source文件夹中建一个shuoshuo文件夹，里面新建index.html文件（和创建about页面一样）。接着填入下面内容即可。不用绑定域名（国际版不用填写serverURL）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html">---<br>title: 雨天语录<br>date: 2024-01-14 18:19:19<br>type: &quot;shuoshuo&quot;<br>layout: &quot;shuoshuo&quot;<br>comments: true<br><br>---<br><br><span class="hljs-comment">&lt;!-- 引用 artitalk --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/artitalk&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 存放说说的容器 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;artitalk_main&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Artitalk</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// serverURL: &#x27;https://shuoshuo.zywvvd.com&#x27;,</span></span><br><span class="language-javascript">    <span class="hljs-attr">appId</span>: <span class="hljs-string">&#x27;**&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">appKey</span>: <span class="hljs-string">&#x27;**&#x27;</span></span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>绑定域名（国内已备案的域名才行）</strong></p><p>绑定域名rainblog.run，然后和上面一样域名服务商添加CNAME解析地址。</p><p>复制服务器地址，如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240630210425856.png" alt="image-20240630210425856"></p><p>然后和上面一样，博客根目录下新建一个shuoshuo文件夹，新建一个index.html文件，写入以下内容。和不绑定国内备案域名的区别就是多填了一个serverURL。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html">---<br>title: 雨天语录<br>date: 2024-01-14 18:19:19<br>type: &quot;shuoshuo&quot;<br>layout: &quot;shuoshuo&quot;<br>comments: true<br><br>---<br><br><span class="hljs-comment">&lt;!-- 引用 artitalk --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/artitalk&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 存放说说的容器 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;artitalk_main&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Artitalk</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">serverURL</span>: <span class="hljs-string">&#x27;https://shuoshuo.rainblog.run&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">appId</span>: <span class="hljs-string">&#x27;**&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">appKey</span>: <span class="hljs-string">&#x27;**&#x27;</span></span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="创建shuoshuo入口"><a href="#创建shuoshuo入口" class="headerlink" title="创建shuoshuo入口"></a>创建shuoshuo入口</h2><p>我们前面已经创建好了shuoshuo的页面，只要在导航栏中添加一个链接作为shuoshuo页面入口即可。</p><p>在主题配置文件中，找到menu，写入以下内容（语录对应的就是shuoshuo页面的入口）。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">menu:</span><br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;home&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-home-fill&quot;</span> &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;文章&quot;</span>, <br>      <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/&quot;</span>, <br>      <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-books&quot;</span>,<br>      <span class="hljs-attr">submenu:</span> [<br>      &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;archive&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/archives/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-archive-fill&quot;</span> &#125;,<br>      &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/categories/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-category-fill&quot;</span> &#125;,<br>      &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;tag&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/tags/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-tags-fill&quot;</span> &#125;<br>    ]<br>    &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;语录&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/shuoshuo&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-note&quot;</span> &#125;<br>  <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/about/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-user-fill&quot;</span> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fluid-2-评论系统</title>
    <link href="/2024/06/30/hexo/fluid-2-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <url>/2024/06/30/hexo/fluid-2-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本来用的评论系统是 <a href="https://utteranc.es/">utteranc.es</a>，但是功能有点少，因此换成Waline。</p><blockquote><p>Waline 是一款基于 Valine 衍生的简洁、安全的评论系统。</p><ul><li>官网链接：<a href="https://www.zywvvd.com/pages/go.html?goUrl=https://waline.js.org/">https://waline.js.org/</a></li><li>相对于 Valine 有一些后天的优势：</li></ul><table><thead><tr><th>优势</th><th>描述</th></tr></thead><tbody><tr><td>自由评论</td><td>完全的 Markdown 支持，同时包含表情、数学公式、HTML 嵌入</td></tr><tr><td>轻量</td><td>54kB gzip 的完整客户端大小</td></tr><tr><td>强大的安全性</td><td>内容校验、防灌水、保护敏感数据等</td></tr><tr><td>登录支持</td><td>在允许匿名评论的基础上，支持账号注册，保持身份</td></tr><tr><td>完全免费部署</td><td>可免费部署在 Vercel 上</td></tr><tr><td>易于部署</td><td>多种部署部署方式和存储服务支持</td></tr></tbody></table></blockquote><p>下面是具体的应用步骤。</p><h2 id="LeanCloud创建应用"><a href="#LeanCloud创建应用" class="headerlink" title="LeanCloud创建应用"></a>LeanCloud创建应用</h2><p>建议用国际版，不用绑定域名。创建应用选择免费的开发版本即可。</p><p>进入应用，选择左下角的 <code>设置</code> &gt; <code>应用 Key</code>。你可以看到你的 <code>APP ID</code>,<code>APP Key</code> 和 <code>Master Key</code>，后续会用到这三个值。</p><h2 id="Vercel部署"><a href="#Vercel部署" class="headerlink" title="Vercel部署"></a>Vercel部署</h2><p>vercel链接：<a href="https://vercel.com/new/airaindays-projects/clone?repository-url=https://github.com/walinejs/waline/tree/main/example">New Project – Vercel</a></p><p>点击上方链接，跳转至 Vercel 进行 Server 端部署。</p><p>如果你未登录的话，Vercel 会让你注册或登录，请使用 GitHub 账户进行快捷登录。</p><p>输入一个你喜欢的 Vercel 项目名称并点击 <code>Create</code> 继续:</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240630084101726.png" alt="image-20240630084101726"></p><p>等待一会，出现满屏散花就说明部署成功了。点击Dashboard进入控制面板。</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240630084212037.png" alt="image-20240630084212037"></p><p>点击顶部的<code>Settings-&gt;Environment Variables</code>进入环境变量配置页，并配置三个环境变量<code>LEAN_ID</code>，<code>LEAN_KEY</code>和 <code>LEAN_MASTER_KEY</code>，它们的值分别对应上一步在LeanCloud中获得的<code>APP ID</code>，<code>APP KEY</code>，<code>Master Key</code>，记得点击右下角<code>Save</code></p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240630084912832.png" alt="image-20240630084912832"></p><p>环境变量配置完成后，点击顶部<code>Deployments</code>，进行<code>Redeploy</code>，使配置生效</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240630085027551.png" alt="image-20240630085027551"></p><p>重新部署完成后，点击<code>Visit</code>即可访问Waline服务端地址</p><p>在该页面点击<code>Login</code>，弹框页面则为服务端的登录地址，可在此注册和登录</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240630085609684.png" alt="image-20240630085609684"></p><p>亦可以通过<code>评论系统地址/ui</code>或是登录过后点击自己的头像进入应用的管理页面。</p><p>依次点击<code>Settings</code>,<code>Domains</code>，复制服务地址，后面需要用到</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240630092117472.png" alt="image-20240630092117472"></p><h2 id="Hexo-Fluid主题中使用Waline评论系统"><a href="#Hexo-Fluid主题中使用Waline评论系统" class="headerlink" title="Hexo Fluid主题中使用Waline评论系统"></a>Hexo Fluid主题中使用Waline评论系统</h2><p>修改主题配置文件：</p><p>1.修改<code>comments</code>配置项</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">waline</span><br></code></pre></td></tr></table></figure><p>2.启用<code>waline</code>配置项</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">waline:</span><br>  <span class="hljs-attr">serverURL:</span> <span class="hljs-string">&#x27;blog-waline-x74w.vercel.app&#x27;</span>  <span class="hljs-comment"># 上面复制过来的服务地址</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>  <span class="hljs-attr">meta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;link&#x27;</span>]<br>  <span class="hljs-attr">requiredMeta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>]<br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">&#x27;zh-CN&#x27;</span><br>  <span class="hljs-attr">emoji:</span> [<span class="hljs-string">&#x27;https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo&#x27;</span>]<br>  <span class="hljs-attr">dark:</span> <span class="hljs-string">&#x27;html[data-user-color-scheme=&quot;dark&quot;]&#x27;</span><br>  <span class="hljs-attr">wordLimit:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">locale:</span> <br>    <span class="hljs-attr">placeholder:</span> <span class="hljs-string">&#x27;哈，快找个位置随便坐~&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="国内网络出错"><a href="#国内网络出错" class="headerlink" title="国内网络出错"></a>国内网络出错</h2><p>国内网路环境加载不了评论，也发布不了评论</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240630093058555.png" alt="image-20240630093058555"></p><p>此时我们需要绑定国内域名，注意绑定国内域名时请绑定你申请域名的子域名，比如你的域名时airainday.top，应该填写waline.airianday.top,waline可以自定义为你想要的名称。（这样做是因为airainday.top之前已经与airainday.github.io绑定了，这里再填写airainday.top会冲突，因此填了一个子域名）</p><p>然后需要在域名提供商那里添加CNAME解析记录：</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240630095432783.png" alt="image-20240630095432783"></p><p>出现下图说明DNS解析正确，接着会生成SSL证书，等待一会。</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240630095111432.png" alt="image-20240630095111432"></p><p>等了很久也没有成功，发现是绑定的域名没有备案，换一个备案后的域名即可。</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240630145911262.png" alt="image-20240630145911262"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.kevinchu.top/2023/07/17/vercel-deploy-waline/">Vercel部署Waline评论系统 - KEVIN’S BLOG (kevinchu.top)</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fluid-1-个性化页脚</title>
    <link href="/2024/06/29/hexo/fluid-1-%E4%B8%AA%E6%80%A7%E5%8C%96%E9%A1%B5%E8%84%9A/"/>
    <url>/2024/06/29/hexo/fluid-1-%E4%B8%AA%E6%80%A7%E5%8C%96%E9%A1%B5%E8%84%9A/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题补充Leancloud应用绑定域名无法通过SSL"><a href="#问题补充Leancloud应用绑定域名无法通过SSL" class="headerlink" title="问题补充Leancloud应用绑定域名无法通过SSL"></a>问题补充Leancloud应用绑定域名无法通过SSL</h2><p>之前创建的LeanCloud国际版应用由于没有绑定国内域名，国内环境无法访问，导致依赖该应用的功能无法使用，比如网站访客量和访客数，文章浏览数等。</p><p>leancloud应用中绑定域名</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240630100116929.png" alt="image-20240630100116929"></p><p>会让你配置DNS，记下CNAME后面的值</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240630100327033.png" alt="image-20240630100327033"></p><p>域名提供商里添加解析</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240630100257964.png" alt="image-20240630100257964"></p><p>DNS配置没问题后，等待部署证书</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240630100853360.png" alt="image-20240630100853360"></p><p>说绑定失败，“查询A和AAA记录时DNSSEC: DNSKEY Missing”。并且VERCEL绑定域名时，验证SSl也失败。<strong>最终发现是绑定的国内域名airianday.top没有备案，最终换了一个备案过的域名rainblog.run，才成功，如下图所示。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240630152520662.png" alt="image-20240630152520662"></p><p>绑定成功后要修改之前的服务地址为该域名，比如下面添加网站访问量和访客数，文章浏览数时要添加：</p><p><code>server_url: https://shuoshuo.rainblog.run</code>,本来用国际版不写也是可以的，但是国际版的国内要用魔法上网才行，因此国际版绑定备案了的域名后，也要补充server_url的值。</p><hr><p>本篇文章主要介绍如何个性化备案、网站运行时长、添加访问量和访客数。以下教程基于Fluid主题，主题安装方式是直接用npm安装，安装方式参考：<a href="https://hexo.fluid-dev.com/docs/start/">开始使用 | Hexo Fluid 用户手册 (fluid-dev.com)</a>。</p><h2 id="运行时长和个性化备案"><a href="#运行时长和个性化备案" class="headerlink" title="运行时长和个性化备案"></a>运行时长和个性化备案</h2><p>效果如下</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240629211459247.png" alt="image-20240629211459247"></p><p>参考链接：<a href="https://htext.top/post/aaca4077.html">我的 Fluid 主题折腾记录 - Huanlan233’s Texts (htext.top)</a></p><p>这里利用Fluid的注入代码的方式来完成上述两个功能，可以先了解一下：<a href="https://hexo.fluid-dev.com/docs/advance/#hexo-%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81">进阶用法 | Hexo Fluid 用户手册 (fluid-dev.com)</a>，该方法可以在不改变源码文件情况下修改主题功能。</p><h3 id="添加运行时长"><a href="#添加运行时长" class="headerlink" title="添加运行时长"></a>添加运行时长</h3><p>博客项目根目录下新建文件夹scripts，并新建一个footer.js文件，里面填入下面代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;theme_inject&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">injects</span>) &#123;<br>  injects.<span class="hljs-property">footer</span>.<span class="hljs-title function_">file</span>(<span class="hljs-string">&#x27;default&#x27;</span>, <span class="hljs-string">&#x27;source/_inject/layout/_partials/footer.ejs&#x27;</span>);<br>&#125;<br>);<br></code></pre></td></tr></table></figure><p>上述代码含义就是将<code>source/_inject/layout/_partials/footer.ejs</code>文件内容完全替换<code>&lt;footer&gt;&lt;/footer&gt;</code>中的内容，我们只要修改<code>source/_inject/layout/_partials/footer.ejs</code>中的内容即可随意定义footer了。</p><p>下载<a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">fluid源码</a>将<code>layout/_partials/footer.ejs</code>复制到博客项目根目录<code>source/_inject/layout/_partials/</code>文件夹下（没有的目录请新建）。直接复制源码文件是为了保留之前的所有功能，然后我们基于此修改就能添加新的功能了。</p><p>在根目录<code>source</code>目录内新建文件<code>js/runtime.js</code>(没有的目录请新建)，复制下面代码到该文件中（代码来自参考链接）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">StartTime</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;2022/6/5 00:00:00&#x27;</span>); <span class="hljs-comment">// 获取开始时间</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">runtime</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(<span class="hljs-string">&quot;runtime()&quot;</span>, <span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">NowTime</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(); <span class="hljs-comment">// 获取现在的时间</span><br><br>    <span class="hljs-title class_">Time</span> = (<span class="hljs-title class_">NowTime</span>.<span class="hljs-title function_">getTime</span>() - <span class="hljs-title class_">StartTime</span>.<span class="hljs-title function_">getTime</span>()) / <span class="hljs-number">1000</span>; <span class="hljs-comment">// 计算已存活时间(s)</span><br><br>    <span class="hljs-title class_">MaximumUnit</span> = <span class="hljs-number">365</span> * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>; <span class="hljs-comment">// 最大单位</span><br><br>    <span class="hljs-title class_">Year</span> = <span class="hljs-title class_">Time</span> / <span class="hljs-title class_">MaximumUnit</span>;<br>    <span class="hljs-title class_">YearINT</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Year</span>);<br><br>    <span class="hljs-title class_">Month</span> = (<span class="hljs-title class_">Year</span> - <span class="hljs-title class_">YearINT</span>) * <span class="hljs-number">12</span>;<br>    <span class="hljs-title class_">MonthINT</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Month</span>);<br><br>    <span class="hljs-title class_">Day</span> = (<span class="hljs-title class_">Month</span> - <span class="hljs-title class_">MonthINT</span>) * (<span class="hljs-number">365</span>/<span class="hljs-number">12</span>); <span class="hljs-comment">//平均天数，防止出现过大的偏差</span><br>    <span class="hljs-title class_">DayINT</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Day</span>);<br><br>    <span class="hljs-title class_">Hour</span> = (<span class="hljs-title class_">Day</span> - <span class="hljs-title class_">DayINT</span>) * <span class="hljs-number">24</span>;<br>    <span class="hljs-title class_">HourINT</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Hour</span>);<br><br>    <span class="hljs-title class_">Minute</span> = (<span class="hljs-title class_">Hour</span> - <span class="hljs-title class_">HourINT</span>) * <span class="hljs-number">60</span>;<br>    <span class="hljs-title class_">MinuteINT</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Minute</span>);<br><br>    <span class="hljs-title class_">Second</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((<span class="hljs-title class_">Minute</span> - <span class="hljs-title class_">MinuteINT</span>) * <span class="hljs-number">60</span>);<br><br><br>    runtime_span.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;本站勉强运行了&quot;</span> + <span class="hljs-title class_">YearINT</span> + <span class="hljs-string">&quot;年 &quot;</span> + <span class="hljs-title class_">MonthINT</span> + <span class="hljs-string">&quot;月 &quot;</span> + <span class="hljs-title class_">DayINT</span> + <span class="hljs-string">&quot;天 &quot;</span> + <span class="hljs-title class_">HourINT</span> + <span class="hljs-string">&quot;时 &quot;</span> + <span class="hljs-title class_">MinuteINT</span> + <span class="hljs-string">&quot;分 &quot;</span> + <span class="hljs-title class_">Second</span> + <span class="hljs-string">&quot;秒&quot;</span>;<br>    <span class="hljs-comment">// 将数据替换到Span上</span><br>&#125;;<br><span class="hljs-built_in">setInterval</span>(<span class="hljs-string">&quot;runtime()&quot;</span>, <span class="hljs-number">1000</span>); <span class="hljs-comment">// 重复运行，时刻更新数据</span><br><span class="hljs-title function_">runtime</span>();<br></code></pre></td></tr></table></figure><p>然后在<code>footer.ejs</code>文件内填入以下带+号的代码：</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer-inner&quot;</span>&gt;</span></span><br><span class="language-xml">  &lt;%</span><span class="language-ruby"> <span class="hljs-keyword">if</span> (theme.footer.content) &#123; </span><span class="language-xml">%&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer-content&quot;</span>&gt;</span></span><br><span class="language-xml">      &lt;%-</span><span class="language-ruby"> theme.footer.content </span><span class="language-xml">%&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  &lt;%</span><span class="language-ruby"> &#125; </span><span class="language-xml">%&gt;</span><br><span class="language-xml">  &lt;%</span><span class="language-ruby"> <span class="hljs-keyword">if</span> (theme.footer.statistics.enable) &#123; </span><span class="language-xml">%&gt;</span><br><span class="language-xml">    &lt;%-</span><span class="language-ruby"> partial(<span class="hljs-string">&#x27;_partials/footer/statistics.ejs&#x27;</span>) </span><span class="language-xml">%&gt;</span><br><span class="language-xml">  &lt;%</span><span class="language-ruby"> &#125; </span><span class="language-xml">%&gt;</span><br><span class="language-xml"></span><br><span class="language-xml">  +<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;runtime&quot;</span>&gt;</span></span><br><span class="language-xml">  +  <span class="hljs-comment">&lt;!-- 网站已运行时间 --&gt;</span></span><br><span class="language-xml">  +  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;runtime_span&quot;</span>&gt;</span>加载中...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">  +<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  &lt;%</span><span class="language-ruby"> <span class="hljs-keyword">if</span>(theme.footer.beian.enable) &#123; </span><span class="language-xml">%&gt;</span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 备案信息 ICP for China --&gt;</span></span><br><span class="language-xml">    &lt;%-</span><span class="language-ruby"> partial(<span class="hljs-string">&#x27;_partials/footer/beian.ejs&#x27;</span>) </span><span class="language-xml">%&gt;</span><br><span class="language-xml">  &lt;%</span><span class="language-ruby"> &#125; </span><span class="language-xml">%&gt;</span><br><span class="language-xml">  &lt;%</span><span class="language-ruby"> <span class="hljs-keyword">if</span>(theme.web_analytics.cnzz) &#123; </span><span class="language-xml">%&gt;</span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- cnzz Analytics Icon --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cnzz_stat_icon_&lt;%=</span></span></span><span class="language-ruby"> theme.web_analytics.cnzz </span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">%&gt;&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">  &lt;%</span><span class="language-ruby"> &#125; </span><span class="language-xml">%&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>最后在主题配置文件中（_config_fluid.yml）引入自定义的<code>runtime.js</code>文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">custom_js</span>: # 找到custom_js，添加以下代码<br>- <span class="hljs-regexp">/js/</span>runtime.<span class="hljs-property">js</span> <br></code></pre></td></tr></table></figure><p>至此已完成。</p><h3 id="添加萌备案"><a href="#添加萌备案" class="headerlink" title="添加萌备案"></a>添加萌备案</h3><p>和添加运行时间原理一样，不过不用引入自定义的js文件，而是用ejs文件。</p><p>新建文件：<code>source\_inject\layout\_partials\footer\moe_beian.ejs</code>，填入以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;div class=&quot;moe_beian&quot;&gt;<br>    &lt;span&gt;<br>      &lt;a href=&quot;https://icp.gov.moe/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;<br>        &lt;%- theme.footer.moe_beian.icp_text %&gt;<br>      &lt;/a&gt;<br>    &lt;/span&gt;<br>    &lt;% if(theme.footer.moe_beian.moe_text) &#123; %&gt;<br>      &lt;% if(theme.footer.moe_beian.moe_code) &#123; %&gt;<br>        &lt;span title=&quot;233333&quot;&gt;<br>          &lt;a<br>            href=&quot;https://icp.gov.moe/?keyword=&lt;%= theme.footer.moe_beian.moe_code %&gt;&quot;<br>            rel=&quot;nofollow noopener&quot;<br>            class=&quot;beian-moe&quot;<br>            target=&quot;_blank&quot;<br>          &gt;<br>            &lt;% if(theme.footer.moe_beian.moe_icon) &#123; %&gt;<br>              &lt;span style=&quot;visibility: hidden; width: 0&quot;&gt;|&lt;/span&gt;<br>              &lt;img src=&quot;&lt;%= url_for(theme.footer.moe_beian.moe_icon) %&gt;&quot; alt=&quot;moe-icon&quot;/&gt;<br>            &lt;% &#125; %&gt;<br>            &lt;span&gt;&lt;%- theme.footer.moe_beian.moe_text %&gt;&lt;/span&gt;<br>          &lt;/a&gt;<br>        &lt;/span&gt;<br>      &lt;% &#125; else &#123; %&gt;<br>        &lt;span class=&quot;beian-moe&quot;&gt;<br>          &lt;% if(theme.footer.moe_beian.moe_icon) &#123; %&gt;<br>            &lt;span style=&quot;visibility: hidden; width: 0&quot;&gt;|&lt;/span&gt;<br>            &lt;img src=&quot;&lt;%= url_for(theme.footer.moe_beian.moe_icon) %&gt;&quot; alt=&quot;moe-icon&quot;/&gt;<br>          &lt;% &#125; %&gt;<br>          &lt;span class=&quot;beian-moe&quot;&gt;&lt;%- theme.footer.moe_beian.moe_text %&gt;&lt;/span&gt;<br>        &lt;/span&gt;<br>      &lt;% &#125; %&gt;<br>    &lt;% &#125; %&gt;<br>  &lt;/div&gt;<br></code></pre></td></tr></table></figure><p>在<code>source\_inject\layout\_partials\footer.ejs</code>新增以下带+代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js">+&lt;% <span class="hljs-keyword">let</span> dir = process.<span class="hljs-title function_">cwd</span>() %&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer-inner&quot;</span>&gt;</span></span><br><span class="language-xml">  &lt;% if (theme.footer.content) &#123; %&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer-content&quot;</span>&gt;</span></span><br><span class="language-xml">      &lt;%- theme.footer.content %&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  &lt;% &#125; %&gt;</span><br><span class="language-xml">  &lt;% if (theme.footer.statistics.enable) &#123; %&gt;</span><br><span class="language-xml">    &lt;%- partial(&#x27;_partials/footer/statistics.ejs&#x27;) %&gt;</span><br><span class="language-xml">  &lt;% &#125; %&gt;</span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;runtime&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 网站已运行时间 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;runtime_span&quot;</span>&gt;</span>加载中...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  &lt;% if(theme.footer.beian.enable) &#123; %&gt;</span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 备案信息 ICP for China --&gt;</span></span><br><span class="language-xml">    &lt;%- partial(&#x27;_partials/footer/beian.ejs&#x27;) %&gt;</span><br><span class="language-xml">  &lt;% &#125; %&gt;</span><br><span class="language-xml">  &lt;% if(theme.web_analytics.cnzz) &#123; %&gt;</span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- cnzz Analytics Icon --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cnzz_stat_icon_&lt;%= theme.web_analytics.cnzz %&gt;&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">  &lt;% &#125; %&gt;</span><br><span class="language-xml"></span><br><span class="language-xml">  +&lt;% if(theme.footer.moe_beian.enable) &#123; %&gt;</span><br><span class="language-xml">  + <span class="hljs-comment">&lt;!-- 备案信息 ICP for Moe --&gt;</span></span><br><span class="language-xml">  + &lt;%- include(dir + &#x27;/source/_inject/layout/_partials/footer/moe_beian.ejs&#x27;) %&gt;</span><br><span class="language-xml">  +&lt;% &#125; %&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>主题配置文件中在footer下添加以下代码，需要自行修改moe的个性化信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">footer</span> <span class="hljs-comment"># 找到footer，在下面添加以下代码即可</span><br>    <span class="hljs-comment"># 好玩的备案</span><br>      <span class="hljs-attr">moe_beian:</span><br>        <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">icp_text:</span> <br>        <span class="hljs-attr">moe_text:</span> <span class="hljs-string">萌ICP备20240531号</span><br>        <span class="hljs-attr">moe_code:</span> <span class="hljs-number">20240531</span><br>        <span class="hljs-attr">moe_icon:</span> <span class="hljs-string">/img/moe_beian.png</span><br></code></pre></td></tr></table></figure><p>下载<a href="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/icon120.png">moe图标</a>放在<code>/img/moe_beian.png</code>下。可以用该工具修改图标大小：<a href="https://www.iloveimg.com/zh-cn">iLoveIMG | 图像文件在线编辑工具</a>。</p><h2 id="网站访问量和访客数、文章浏览数"><a href="#网站访问量和访客数、文章浏览数" class="headerlink" title="网站访问量和访客数、文章浏览数"></a>网站访问量和访客数、文章浏览数</h2><p>参考官方教程：<a href="https://hexo.fluid-dev.com/docs/guide/#%E5%B1%95%E7%A4%BA-pv-%E4%B8%8E-uv-%E7%BB%9F%E8%AE%A1">配置指南 | Hexo Fluid 用户手册 (fluid-dev.com)</a></p><p>这里用LeanCloud国际版来实现，需要自己先注册账号。</p><p>Leancloud新建一个应用：<a href="https://console.leancloud.app/apps">LeanCloud</a>。</p><p>在主题配置中找到<code>web_analytics:  # 网页访问统计</code>，修改以下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">web_analytics:</span>  <span class="hljs-comment"># 网页访问统计</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <br>  <span class="hljs-attr">leancloud:</span><br>    <span class="hljs-attr">app_id:</span> <span class="hljs-string">你新建应用的app_id</span><br>    <span class="hljs-attr">app_key:</span> <span class="hljs-string">你新建应用的app_key</span><br>    <span class="hljs-comment"># REST API 服务器地址，国际版不填</span><br>    <span class="hljs-comment"># Only the Chinese mainland users need to set</span><br>    <span class="hljs-attr">server_url:</span><br>    <span class="hljs-comment"># 统计页面时获取路径的属性</span><br>    <span class="hljs-comment"># Get the attribute of the page path during statistics</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>    <span class="hljs-comment"># 开启后不统计本地路径( localhost 与 127.0.0.1 )</span><br>    <span class="hljs-comment"># If true, ignore localhost &amp; 127.0.0.1</span><br>    <span class="hljs-attr">ignore_local:</span> <span class="hljs-literal">true</span> <br></code></pre></td></tr></table></figure><p>找到footer下的statistics配置，修改以下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">statistics:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;leancloud&quot;</span><br>  <span class="hljs-attr">pv_format:</span> <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span><br>  <span class="hljs-attr">uv_format:</span> <span class="hljs-string">&quot;总访客数 &#123;&#125; 人&quot;</span>  <br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240629220535866.png" alt="image-20240629220535866"></p><p>找到post的meta的views，修改以下配置，成功后会在每个文章中展示该文章浏览人数。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post:</span><br><span class="hljs-attr">meta:</span><br>        <span class="hljs-attr">views:</span><br>          <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-comment"># 统计数据来源</span><br>          <span class="hljs-comment"># Data Source</span><br>          <span class="hljs-comment"># Options: busuanzi | leancloud</span><br>          <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;leancloud&quot;</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/airainday/blogimage@main/image-20240629220643606.png" alt="image-20240629220643606"></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多模态综述</title>
    <link href="/2024/06/27/multimodal/%E5%A4%9A%E6%A8%A1%E6%80%81%E7%BB%BC%E8%BF%B0/"/>
    <url>/2024/06/27/multimodal/%E5%A4%9A%E6%A8%A1%E6%80%81%E7%BB%BC%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文将集中于语言-视觉多模态方面的综述。</p>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多模态综述</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
